{
  "blink": {
    "id": 1,
    "ruleId": "blink",
    "userImpact": "Serious",
    "wcag": "2.2.2",
    "howToFixTheProblem": "Remove all blink elements.",
    "whyItMatters": "As the name suggests, blink tags cause content to flash. Though you may like the effect, blinking text can be difficult to read, and blinking objects (links, buttons, etc.) can be difficult to activate, especially for users with imprecise or limited dexterity.It can be very difficult for people with visual and cognitive disabilities to see and understand text that blinks. Blinking text be distracting, especially for users with cognitive disabilities. It can also be difficult for some individuals to comprehend. For these reasons, the blink element should never be used.",
    "ruleDescription": "This rule requires that no blink elements are present. Flashing text can be difficult to read and blinking objects can be difficult to activate. The associated automated check finds the presence of all blink elements so that they can be removed.",
    "theAlgorithm": "Checks to make sure that the blink element is never used.",
    "disabilitiesAffected": "Low Vision,Mobility,Cognitive",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "2.2.2 Pause, Stop, Hide",
    "section508Guidelines": "1194.22 (j) Screen flicker frequency"
  },
  "definition-list": {
    "id": 2,
    "ruleId": "definition-list",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Check that your definition list has only dt and dd elements. Furthermore, make sure these are properly ordered, dt should precede dd elements.",
    "whyItMatters": "Screen readers have a specific way of announcing definition lists. When such lists are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output.A definition list is used to provide the definitions of words or phrases. The Definition List is marked up using the dl element. Within the list, each term is put in a separate dt element, and its definition goes in the dd element directly following it.",
    "ruleDescription": "Definition lists (dl) must contain only properly-ordered dt and dd groups, script or template elements.",
    "theAlgorithm": "Ensures that all dl elements are structured correctly.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "dlitem": {
    "id": 3,
    "ruleId": "dlitem",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Wrap the list item in parent dl elements to ensure the list follows the proper hierarchy. Furthermore, make sure that the dt and dd elements are in the proper order.",
    "whyItMatters": "A definition list item must be wrapped in parent dl elements, otherwise it will be invalid.A definition list must follow a specific hierarchy. A list is defined using the dl element. What follows are alternating sets of dt and dd elements, starting with the dt element. Dt elements define a term while dd elements denote a term's description. Each set of dt elements must have a corresponding set of dd elements. Only dt and dd elements are allowed in definition list. If this hierarchy is not followed, the list will be invalid.",
    "ruleDescription": "Definition list items (dt and/or dd) must be wrapped in parent dl elements to be valid. This enables screen reader users to understand the proper hierarchy of information in the list.",
    "theAlgorithm": "Ensures that all child dd and dt elements have a dl as a parent.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "html-has-lang": {
    "id": 4,
    "ruleId": "html-has-lang",
    "userImpact": "Serious",
    "wcag": "3.1.1",
    "howToFixTheProblem": "Add a lang attribute to the html element (e.g. <html lang=\"en\">) whose value represents the primary language of document.",
    "whyItMatters": "When configuring a screen reader, users select a default language. If the language of a webpage is not specified, the screen reader assumes the default language set by the user. Language settings become an issue for users who speak multiple languages and access website in more than one language. It is essential to specify a language and ensure that it is valid so website text is pronounced correctly.Screen readers use different sound libraries for each language, based on the pronunciation and characteristics of that language. Screen readers can switch between these language libraries easily, but only if the documents specify which language(s) to read and when. If the language is not specified, the screen reader reads the document in the user's default language, resulting in a strange accent! It is impossible to understand anything when screen readers are using the wrong language library.",
    "ruleDescription": "The HTML document element must contain a valid lang attribute or must correspond to a valid lang code for multilingual screen reader users who may prefer a language other than the default.",
    "theAlgorithm": "Checks to make sure that the blink element is never used.Ensures that all dl elements are structured correctly.Ensures that all child dd and dt elements have a dl as a parent.Ensures that every HTML document has a lang attribute",
    "disabilitiesAffected": "Blind,Deafblind,Cognitive",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "3.1.1 Language of Page",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "html-lang-valid": {
    "id": 5,
    "ruleId": "html-lang-valid",
    "userImpact": "Serious",
    "wcag": "3.1.1",
    "howToFixTheProblem": "Add a lang or xml:lang attribute to the html element (e.g. <html lang=\"en\"> or <html xml:lang=\"en\">) whose value represents the primary language of document.Make sure you identify a language in the opening <html> element and spell the attribute correctly. For example, if the primary language of a document is English, you could specify the language as follows:",
    "whyItMatters": "When configuring a screen reader, users select a default language. If the language of a webpage is not specified, the screen reader assumes the default language set by the user. Language settings are an issue for users who speak multiple languages and access website in more than one language. It is essential to specify a language and ensure that it is valid so website text is pronounced correctly.Screen readers use different sound libraries for each language, based on the pronunciation and characteristics of that language. Screen readers can switch between these language libraries easily, but only if the documents correctly specify which language(s) to read. If the language is not specified, the screen reader reads the document in the user's default language, resulting in a confusing accent! It is impossible to understand anything when screen readers are using the wrong language library.",
    "ruleDescription": "The HTML document must contain a valid lang attribute or must correspond to a valid lang code for multilingual screen reader users who may prefer a language other than the default.",
    "theAlgorithm": "Ensures that every HTML document has a lang or xml:lang attribute and that the attribute's value is valid value.",
    "disabilitiesAffected": "Blind,Deafblind,cognitive",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "3.1.1 Language of Page",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "html-xml-lang-mismatch": {
    "id": 6,
    "ruleId": "html-xml-lang-mismatch",
    "userImpact": "Moderate",
    "wcag": "3.1.1",
    "howToFixTheProblem": "Ensure that all list item li elements are wrapped inside of ul or ol parent elements. List items may be contained in either unordered (bullet) lists or ordered (sequentially numbered) lists. Screen readers notify users when they come to a list, and tell them how many items are in a list. Announcing the number of list items and the current list item helps listeners know what they are listening to, and what to expect as they listen to it. Child list item elements must be contained within the appropriate parent list elements enabling screen readers to inform the listener that they are listening to a list.",
    "whyItMatters": "Screen readers use different sound libraries for each language, based on the pronunciation and characteristics of that language. Screen readers can switch between language libraries easily, but only if documents specify which language(s) should to read. If the language is not specified, screen readers read documents in the user's default language, resulting in garbled language. It can be challenging to understand anything when screen readers are using the wrong language library.",
    "ruleDescription": "The HTML document must contain a valid lang attribute or must correspond to a valid lang code for multilingual screen reader users who may prefer a language other than the default. The xml:lang attribute value, if included on the html element, must duplicate the value of the lang exactly.",
    "theAlgorithm": "Ensures every HTML document has a lang attribute with a valid value and, if present, the xml:lang value duplicates the lang value.",
    "disabilitiesAffected": "Blind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "3.1.1 Language of Page",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "listitem": {
    "id": 7,
    "ruleId": "listitem",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Ensure that all list item li elements are wrapped inside of ul or ol parent elements. List items may be contained in either unordered (bullet) lists or ordered (sequentially numbered) lists. Screen readers notify users when they come to a list, and tell them how many items are in a list. Announcing the number of list items and the current list item helps listeners know what they are listening to, and what to expect as they listen to it. Child list item elements must be contained within the appropriate parent list elements enabling screen readers to inform the listener that they are listening to a list.",
    "whyItMatters": "For a list to be valid, it must have both parent and child elements. Parent elements can either be a set of ul tags or a set of ol tags. Child elements must be declared inside of these tags using the li tag. Screen readers notify users when they come to a list, and tell them how many items are in a list. Announcing the number of items in a list and the current list item helps listeners know what they are listening to, and what to expect as they listen to it. If you don't mark up a list using proper semantic markup in a hierarchy, list items cannot inform the listener that they are listening to a list when no parent is indicating the presence of a list and the type of list.",
    "ruleDescription": "All list items (li) must be contained within ul or ol parent elements.",
    "theAlgorithm": "Ensures li elements are used semantically.",
    "disabilitiesAffected": "Blind,Deaf,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "marquee": {
    "id": 8,
    "ruleId": "marquee",
    "userImpact": "Serious",
    "wcag": "2.2.2",
    "howToFixTheProblem": "Deprecated elements which are presentational in nature have typically been replaced by cascading style sheets (CSS), and their use may interfere with the ability of assistive technologies to properly render content.Remove all marquee elements, even if they are empty.",
    "whyItMatters": "The marquee element creates scrolling text that is difficult to read and click on. Beyond that, it can be distracting to viewers, especially to those with low vision, cognitive disabilities, or attention deficits.People with attention deficits or cognitive disabilities could become distracted by content that scrolls. If scrolling content contains links, people with limited fine motor abilities may not be able to click on the links accurately. Users with visual impairments may not be able to see the scrolling text with enough acuity to know what the content says.",
    "ruleDescription": "<marquee> elements must not be present because they are deprecated, increase difficulty for users with limited dexterity, and are distracting for users with cognitive or attention deficits.",
    "theAlgorithm": "<marquee> elements must not be present because they are deprecated, increase difficulty for users with limited dexterity, and are distracting for users with cognitive or attention deficits.",
    "disabilitiesAffected": "Low Vision,Mobility,Cognitive",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "2.2.2 Pause, Stop, Hide",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "object-alt": {
    "id": 9,
    "ruleId": "object-alt",
    "userImpact": "Serious",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Add alternative text to all embedded <object> elements using either inner text, title attributes, aria-label or aria-labelledby.",
    "whyItMatters": "Screen readers have no way of translating non-text content into text announced to users. Instead, they read out alternative text. For screen reader users to obtain the information contained in embedded object elements which must contain short, descriptive alternative text.The object element defines an embedded object within a document. It is used to embed multimedia (audio, video, applets, etcetera.) or another web page into the document. The object element needs a text alternative so that users of screen readers know the contents of the object.When writing a text alternative, keep in mind that the purpose of the alternative text is to relay information to blind users about the image’s contents and purpose - blind users should be able to get as much information from alternative text as a sighted user gets from the image. Alternative text should give the intent, purpose, and meaning of the image.When writing alternative text, it’s helpful to keep the following questions in mind:Why is the non-text content here? What information is it presenting? What purpose does it fulfill? If I could not use the non-text content, what words would I use to convey the same information or function? Be sure that all text contained in this attribute is useful. Words like “chart”, “image”, “diagram”, or image file names tend not to be very useful.",
    "ruleDescription": "All embedded objects must have text alternatives to be read out to screen reader users.",
    "theAlgorithm": "Ensures that every object element has a text alternative.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Blind,Deafblind",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "list": {
    "id": 10,
    "ruleId": "list",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Ensure all ordered and unordered lists (defined by ul or ol elements) contain only li content elements.",
    "whyItMatters": "Screen readers have a specific way of announcing lists. This feature makes lists clearer to understand, but will only work if lists are properly structured.",
    "ruleDescription": "Lists must be marked up correctly, meaning they must not contain content elements other than li elements.",
    "theAlgorithm": "Ensures that lists are structured correctly.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "video-caption": {
    "id": 11,
    "ruleId": "video-caption",
    "userImpact": "Critical",
    "wcag": "1.2.2",
    "howToFixTheProblem": "Here is a list, using proper semantic markup:Ensure all video elements have a caption using the track element with caption attribute. Ensure the caption conveys all meaningful information in the video element; this includes, but is not limited to, dialogue, musical cues, and sound effects.",
    "whyItMatters": "When content elements other than list items are contained within a set of list elements, screen readers cannot inform the listener that they are listening to items within the list.For a list to be valid, it must have both parent elements (a set of ul elements or a set of ol elements) and child elements (declared inside of these tags using the li element), and any other content elements are invalid.Although some non-content elements such as script, template, style, meta, link, map, area, and datalist are permitted within lists, content elements other than li are not permitted.If a video has no caption, deaf users have limited or no access to the information contained in it. Even if a captions track is available, ensure that it contains all meaningful information in the video, not just dialogue.",
    "theAlgorithm": "Ensures that each element on the page with an accesskey attribute has a unique value.",
    "disabilitiesAffected": "Serious",
    "requirements": "Blind,Low Vision,Mobility",
    "wcagSuccessCriteria": "Best Practice",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "accesskeys": {
    "id": 12,
    "ruleId": "accesskeys",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure all accesskey values in the document are unique.",
    "whyItMatters": "Specifying a accesskey attribute value for some part of a document allows users to quickly activate or move the focus to a specific element by pressing the specified key (usually in combination with the alt key). Duplicating accesskey values creates unexpected effects that ultimately make the page less accessible.For each defined accesskey, ensure the value is unique and does not conflict with any default browser and screen reader shortcut keys.Content is not operable by keyboard users with no or low vision who cannot use devices such as mice that require eye-hand coordination, users who have trouble tracking a pointer, or users who must use alternate keyboards or input devices acting as keyboard emulators.",
    "ruleDescription": "All accesskey attribute values in a document must be unique. Put another way, accesskeys must not be repeated to prevent unexpected effects for keyboard users.",
    "theAlgorithm": "Ensures that each element on the page with an accesskey attribute has a unique value.",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "area-alt": {
    "id": 13,
    "ruleId": "area-alt",
    "userImpact": "Critical",
    "wcag": "1.1.1, 2.4.4, 4.1.2",
    "howToFixTheProblem": "Ensure each clickable <area> within an image map has an alt, aria-label or aria-labelledby attribute value that describes the purpose of the link.<img> elements with usemap attribute values identify image maps that use a set of <map> tags enclosing clickable hotspots defined by area attribute values. An additional alt attribute is required to define alternate text for each area:",
    "whyItMatters": "Screen readers have no way of translating images into words. It is important that all images, including image maps, have alt text values.Screen readers typically announce the filename of the image if alternative text is missing. Filenames do not adequately describe images and are not helpful to screen reader users.",
    "ruleDescription": "An image map is a single image with many clickable areas. Like all images, an image map must have alternate text for each of the different clickable areas, as well as for the larger image itself, since screen readers have no way of translating graphics into text.",
    "theAlgorithm": "Ensures area elements of image maps have alternate text.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "th-has-data-cells": {
    "id": 14,
    "ruleId": "th-has-data-cells",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Ensure that each table header in a data table refers to data cells so that each header cell that is used is actually a header of something.In other words, the th element must have associated data cells.If header attributes exist, ensure that they reference elements with text available to screen readers. The th element must not use the headers attribute th elements should only be used when there is a single row and single column of headers th elements must use the scope attribute",
    "whyItMatters": "Screen readers have a specific way of announcing tables. When tables are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output.When tables are not marked up semantically and do not have the correct header structure, screen reader users cannot correctly perceive the relationships between the cells and their contents visually.",
    "ruleDescription": "Data table markup can be tedious and confusing. Markup tables semantically and with the correct header structure. Screen readers have features to ease table navigation, but tables must be marked up accurately for these features to work correctly.",
    "theAlgorithm": "Checks data tables markup, ensuring each header cell is referenced as a header of a column or row.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "1194.22 (g) Row and column headers for data tables"
  },
  "td-headers-attr": {
    "id": 15,
    "ruleId": "td-headers-attr",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "To fix the problem, ensure that each cell in a table using headers refers to another cell in the same table by creating a scope attribute value on each th element within tr elements. This rule checks that references to header columns and rows connect to specific td elements. To fix the problem, ensure that each cell in a table using headers refers to another cell in the same table by creating a scope attribute value on each th element within tr elements. This rule checks that references to header columns and rows connect to specific td elements. The scope attribute tells the browser and screen reader that everything under the column is related to the header at the top, and everything to the right of the row header is related to that header. Applying the scope attribute to our table the markup now looks like this:",
    "whyItMatters": "Screen readers have a specific way of announcing tables. When tables are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output.Sighted users can usually tell at a glance what the table's headers are and what their relationship to the data is. For non-sighted users this must be done in the markup.When a data table is designed with accessibility in mind, the user enters into table navigation mode, which allows the user to navigate from cell to cell within the table while hearing the screen reader announce the corresponding table headers for the data cells. Hearing the table headers is especially helpful when navigating through large data tables, or when cells contain similar-sounding data that could be easily confused.Table navigation mode is not useful, though, if the table lacks accessibility features.",
    "ruleDescription": "Data table markup can be tedious and confusing. Markup tables semantically and with the correct header structure. Screen readers have features to ease table navigation, but tables must be marked up accurately for these features to work correctly.",
    "theAlgorithm": "Checks that data tables are marked up semantically and have the correct header structure.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "1194.22 (g) Row and column headers for data tables"
  },
  "td-has-header": {
    "id": 16,
    "ruleId": "td-has-header",
    "userImpact": "Critical",
    "wcag": "1.3.1",
    "howToFixTheProblem": "To fix the problem, ensure that each non-empty data cell in a large table has one or more table headers. All table data cells (td) must have a table header to ensure screen reader users can make sense of tabular data.Note: A table is considered large if it is 3 or more cells wide and 3 or more cells high.Example: Simple Data Table with <th scope=\"col\"> and <th scope=\"row\"> To markup a table cell as a header cell, change the <td> to a <th>. You will see that doing this to our example table causes the top row to have bolded, centered text.",
    "whyItMatters": "Screen readers have a specific way of announcing tables. When tables are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output.Screen readers have a specific way of announcing tables. When tables are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output. When tables are not marked up semantically and do not have the correct header structure, screen reader users cannot correctly perceive the relationships between the cells and their contents visually.",
    "ruleDescription": "Data table markup can be tedious and confusing. Tables must be marked up done semantically and with the correct header structure. Screen readers have features to ease table navigation, but tables must be marked up accurately for these features to work correctly.",
    "theAlgorithm": "Checks that data tables are marked up semantically and have the correct header structure.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "1194.22 (g) Row and column headers for data tables"
  },
  "region": {
    "id": 17,
    "ruleId": "region",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure all content is contained within a landmark region, designated with HTML5 landmark elements and/or ARIA landmark regions. Screen reader users can navigate to a section based on its HTML element or ARIA Landmark. For example, you might use ARIA Landmarks to provide a simple replacement for a skip navigation link, though the replacement is only useful for users of screen readers. Sighted users or people using screen enlargers won't benefit from the addition, so it's not a good practice to substitute ARIA landmarks for skip navigation links altogether.",
    "whyItMatters": "Navigating a web page is far simpler for screen reader users if the content splits between multiple high-level sections. Content outside of sections is difficult to find, and the content's purpose may be unclear.Historically, HTML lacked some key semantic markers such as the ability to designate sections of the page as the header, navigation, main content, and footer. Using both HTML5 elements and ARIA landmarks in the same element is considered a best practice, but the future favors using native HTML5 element regions as browser support increases.",
    "ruleDescription": "It is best practice to contain all content excepting skip links, within distinct regions such as the header, nav, main, and footer.",
    "theAlgorithm": "Ensures that all content on a page is contained within a landmark region.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-valid-attr": {
    "id": 18,
    "ruleId": "aria-valid-attr",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "This rule checks for the presence of an unrecognized ARIA attribute, which prevents the attribute from functioning as intended.Ensure all ARIA attributes (as opposed to the values inside of them) used are spelled correctly and correspond to valid ARIA attribute names.For example, aria-hidden=\"true\" would pass, while aria-visible=\"rute\" would fail.Authoring Tools: Using authoring and debugging tools that compare attributes for widget roles, states, and properties to those supported in WAI-ARIA may check the validity of ARIA attributes automatically during development, but they cannot reliably eliminate the need for testing.",
    "whyItMatters": "If the developer uses a non-existent or misspelled ARIA attribute, the attribute will not be able to perform the accessibility function intended by the developer.In order to allow assistive technologies to convey appropriate information to persons with disabilities, user interface elements intended to improve the accessibility and interoperability of web and application content must conform to properly spelled and current ARIA attributes.When developers do not use attributes defined in the WAI-ARIA 1.1 W3C Recommendation, they do not properly convey user interface behaviors and structural information to assistive technologies in document-level markup.",
    "ruleDescription": "ARIA attributes starting with aria- must have valid names. Referring to a misspelled attribute or to one that does not exist will result in an invalid attribute and thus failure of this rule.",
    "theAlgorithm": "Checks all elements that contain WAI-ARIA attributes to ensure that the attributes are valid attributes.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-valid-attr-value": {
    "id": 19,
    "ruleId": "aria-valid-attr-value",
    "userImpact": "Critical",
    "wcag": "WCAG: 4.1",
    "howToFixTheProblem": "Ensure the value inside each attribute is spelled correctly and corresponds to a valid value.For example, aria-hidden=\"true\" would pass, but aria-hidden=\"rtue\" would fail, as would aria-hidden=\"pizza\".As another example, the checkbox role only has three possible values: true, false, or mixed. Using any value other than one of those three will prevent the checkbox from being functional.",
    "whyItMatters": "ARIA attributes (i.e. starting with aria-) must contain valid values. These values must be spelled correctly and correspond to values that make sense for a particular attribute to perform the intended accessibility function.Many ARIA attributes accept a specific set of values. Allowed values, acceptable \"undefined\" values, and acceptable \"default\" values are required. Failure to comply with allowed values results in content that is not accessible to assistive technology users.",
    "ruleDescription": "ARIA attributes starting with aria- must contain valid values. These values must be spelled correctly and correspond to values that make sense for a particular attribute in order to perform the intended accessibility function.",
    "theAlgorithm": "Checks all elements that contain WAI-ARIA attributes to ensure that the values of the attributes are valid.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-command-name": {
    "id": 20,
    "ruleId": "aria-command-name",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Ensure that each element with role=\"link\", role=\"button\", or role=\"menuitem\" has one of the following characteristics:Inner text that is discernible to screen reader users. Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users.",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"link\", role=\"button\", or role=\"menuitem\" that do not have an accessible name.",
    "ruleDescription": "ARIA command elements must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.",
    "theAlgorithm": "Checks all elements with role=\"link\", role=\"button\", or role=\"menuitem\" to ensure that they have a discernable, accessible name.",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-dialog-name": {
    "id": 21,
    "ruleId": "aria-dialog-name",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure that each element with role=\"dialog\" or role=\"alertdialog\" has one of the following characteristics:Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users.",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"dialog\" or role=\"alertdialog\" that do not have an accessible name.",
    "ruleDescription": "Aria dialog elements must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.",
    "theAlgorithm": "Checks all elements with role=\"dialog\" or role=\"alertdialog\" to ensure that they have a discernable, accessible name.",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-input-field-name": {
    "id": 22,
    "ruleId": "aria-input-field-name",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "The aria-input-field-label rule includes six markup patterns that pass testing criteria",
    "whyItMatters": "This new rule ensures every ARIA input field has an accessible name. Accessible names must exist for the following input field roles:combobox listbox searchbox slider spinbutton textbox",
    "ruleDescription": "Ensures every ARIA input field has an accessible name.",
    "theAlgorithm": "ARIA input fields must have an accessible name.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-meter-name": {
    "id": 23,
    "ruleId": "aria-meter-name",
    "userImpact": "Serious",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Ensure that each element with role=\"meter\" has one of the following characteristics:Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users.",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"meter\" that do not have an accessible name.",
    "ruleDescription": "Aria meter elements must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.",
    "theAlgorithm": "Checks all elements with role=\"meter\" to ensure that they have a discernable, accessible name.",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-progressbar-name": {
    "id": 24,
    "ruleId": "aria-progressbar-name",
    "userImpact": "Serious",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Ensure that each element with role=\"progressbar\" has one of the following characteristics:Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users.",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"progressbar\" that do not have an accessible name.Rule Description",
    "ruleDescription": "Aria progressbar elements must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.",
    "theAlgorithm": "Checks all elements with role=\"progressbar\" to ensure that they have a discernable, accessible name.",
    "disabilitiesAffected": "Blind,Low vision,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-allowed-role": {
    "id": 25,
    "ruleId": "aria-allowed-role",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure all values assigned to role=\"\" correspond to valid WAI-ARIA roles.Available roles by type are:Landmark: article, banner, complementary, main, navigation, region, search, contentinfo Widget: alert, alertdialog, application, dialog, group, log, marquee, menu, menubar, menuitem, menuitemcheckbox, menuitemradio, progressbar, separator, slider, spinbutton, status, tab, tablist, tabpanel, timer, toolbar, tooltip, tree, treegrid, treeitem Pseudo HTML: button, button, checkbox, columnheader, combobox, form, grid, gridcell, heading, img, link, listbox, listitem, option, radio, radiogroup, row, rowgroup, rowheader, scrollbar, textbox Document: document (when creating a document region inside an other type of region) Application: application (only around a widget to enable normal keyboard shortcuts for page content) Presentation: presentation (to cancel the native role of the element) Other Semantic: math, definition, note, directory Abstract: command, composite, input, landmark, range, section, sectionhead, select, structure, widget Why it Matters",
    "whyItMatters": "Intended accessible technology behavior by a developer is not enabled when an assigned WAI-ARIA role value is invalid for the parent element.When screen readers and other assistive technologies do not know the role of each element on the web page, they are not able to interact with it intelligently, nor are they able to communicate the role to the user. When the value for a role is invalid, there is no way to communicate the element's features, properties, and methods to assistive technologies. For example, applying role=\"table\" to a <ul> effectively hijacks the default semantics associated with the <ul> element in a way that screenreaders do not expect resulting in unexpected behavior.",
    "ruleDescription": "Values assigned to WAI-ARIA role attributes must be valid. This means values must be spelled correctly, correspond to existing ARIA role values, and must not be abstract roles in order to correctly expose the purpose of the element.",
    "theAlgorithm": "Check all elements containing WAI-ARIA role attribute values to ensure that the role value is valid. A person must ensure that the role value is appropriate to the element in the context of the document.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-roles": {
    "id": 26,
    "ruleId": "aria-roles",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Ensure all values assigned to role=\"\" correspond to valid ARIA roles.Available roles by type are:Landmark: article, banner, complementary, main, navigation, region, search, contentinfo Widget: alert, alertdialog, application, dialog, group, log, marquee, menu, menubar, menuitem, menuitemcheckbox, menuitemradio, progressbar, separator, slider, spinbutton, status, tab, tablist, tabpanel, timer, toolbar, tooltip, tree, treegrid, treeitem Pseudo HTML: button, button, checkbox, columnheader, combobox, contentinfo, form, grid, gridcell, heading, img, link, listbox, listitem, option, radio, radiogroup, row, rowgroup, rowheader, scrollbar, textbox Document: document (when creating a document region inside an other type of region) Application: application (only around a widget to enable normal keyboard shortcuts for page content) Presentation: presentation (to cancel the native role of the element) Other Semantic: math, definition, note, directory Abstract: command, composite, input, landmark, range, section, sectionhead, select, structure, widget",
    "whyItMatters": "Elements assigned invalid ARIA role values are not interpreted by assistive technology as intended by the developer.When screen readers and other assistive technologies do not know the role of each element on the web page, they are not able to interact with it intelligently, nor are they able to communicate the role to the user. An element's features, properties, and methods of conveying information to and/or from the user can be communicated via assistive technologies when a role value is invalid.",
    "ruleDescription": "Values assigned to ARIA role values must be valid. Role values must be spelled correctly, correspond to existing ARIA role values, and must not be abstract roles to correctly expose the purpose of the element.",
    "theAlgorithm": "Checks all elements that contain the WAI-ARIA role attribute to ensure that the role value is valid",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-toggle-field-name": {
    "id": 27,
    "ruleId": "aria-toggle-field-name",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Ensure every ARIA toggle field has an accessible name",
    "whyItMatters": "Ensures every element with a semantic role also has an accessible name. Semantic roles include:checkbox menu menuitemcheckbox menuitemradio radio radiogroup switch Rule Description",
    "ruleDescription": "Ensures every ARIA toggle field has an accessible name.",
    "theAlgorithm": "ARIA toggle fields have an accessible name.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "4.1.2Name,Role. Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-tooltip-name": {
    "id": 28,
    "ruleId": "aria-tooltip-name",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Ensure that each element with role=\"tooltip\" has one of the following characteristics:Inner text that is discernible to screen reader users. Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users.",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"tooltip\" that do not have an accessible name.",
    "ruleDescription": "Aria tooltip elements must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.",
    "theAlgorithm": "Checks all elements with role=\"tooltip\" to ensure that they have a discernable, accessible name.Resources",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-treeitem-name": {
    "id": 29,
    "ruleId": "aria-treeitem-name",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure that each element with role=\"treeitem\" has one of the following characteristics:Inner text that is discernible to screen reader users. Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users.",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"treeitem\" that do not have an accessible name.Rule Description",
    "ruleDescription": "Aria treeitem elements must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.",
    "theAlgorithm": "Checks all elements with role=\"treeitem\" to ensure that they have a discernable, accessible name.",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-hidden-focus": {
    "id": 30,
    "ruleId": "aria-hidden-focus",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Fix the issue by ensuring the value inside each attribute is spelled correctly and corresponds to a valid value. Use appropriate ARIA roles, states, and properties.The following examples PASS the aria-hidden=\"true\" elements do not contain focusable elements rule:",
    "whyItMatters": "Using the aria-hidden=\"true\" attribute on an element removes the element and ALL of its child nodes from the accessibility API making it completely inaccessible to screen readers and other assistive technologies. Aria-hidden may be used with extreme caution to hide visibly rendered content from assistive technologies only if the act of hiding this content is intended to improve the experience for users of assistive technologies by removing redundant or extraneous content. If aria-hidden is used to hide visible content from screen readers, the identical or equivalent meaning and functionality must be exposed to assistive technologies.Note: Using aria-hidden=\"false\" on content that is a descendent of an element that is hidden using aria-hidden=\"true\" will NOT expose that content to the accessibility API and it will not be accessible to screen readers or other assistive technologies.The rule applies to any element with an aria-hidden=\"true\" attribute.By adding aria-hidden=\"true\" to an element, content authors ensure that assistive technologies will ignore the element. This can be used to hide decorative parts of a web page, such as icon fonts - that are not meant to be read by assistive technologies.A focusable element with aria-hidden=\"true\" is ignored as part of the reading order, but still part of the focus order, making it’s state of visible or hidden unclear.",
    "ruleDescription": "This rule checks aria-hidden elements do not contain focusable elements.",
    "theAlgorithm": "For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.",
    "disabilitiesAffected": "Blind,Low Vision,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (AA): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-hidden-body": {
    "id": 31,
    "ruleId": "aria-hidden-body",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Remove the aria-hidden=\"true\" attribute from the document body element.Caution: aria-hidden=\"false\" is known to work inconsistently when used in conjunction with styles or attributes that have historically prevented rendering in all modalities, such as display: none, visibility: hidden in CSS, or the hidden attribute in HTML5. Use caution and test thoroughly before relying on this approach.Reconsider the location of the hidden content to determine whether you can relocate it to an area of the page other than the body element. Typically, content is hidden from screen readers to reduce the unnecessary information that screen reader users would tend to skip (redundant or extraneous content).",
    "whyItMatters": "When <body aria-hidden=\"true\", content is not accessible to assistive technology.Applying aria-hidden=\"true\" to otherwise accessible objects: A web page is designed to be fully accessible, and it would be accessible if elements do not contain the aria-hidden=\"true\" attribute value. Screen readers do not read content marked with the aria-hidden=\"true\" attribute value. Users can still tab to focusable elements in the hidden objects, but screen readers remain silent.Any content or interface elements intentionally hidden from users — e.g., inactive dialogs, collapsed menus — must also be hidden from screen reader users. When items are available to sighted users — such as when they activate a button or expand a menu item — the same items must be available to screen reader users. The goal is to provide screen reader users an equivalent user experience to sighted users. If there is a compelling reason to hide content from sighted users, there is usually a compelling reason also to hide that content from blind users. Further, when content is made available to sighted users, it makes sense to make it available to blind users as well.",
    "ruleDescription": "Document content is not accessible to assistive technology if <body aria-hidden=\"true\">.",
    "theAlgorithm": "Checks for the presence of the aria-hidden=\"true\" attribute the document's body element and alerts with a pass or fail message accordingly.",
    "disabilitiesAffected": "Blind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "no-autoplay-audio": {
    "id": 32,
    "ruleId": "no-autoplay-audio",
    "userImpact": "Moderate",
    "wcag": "1.4.2",
    "howToFixTheProblem": "Fix this issue by using ONE of the following techniques:Only start audio by an action initiated by the user (strongly preferred).Stop the auto-playing audio within three seconds.Provide an easily located, accessible mechanism to stop, pause, mute, or adjust volume for audio that automatically plays for more than 3 seconds.",
    "whyItMatters": "People who are blind or have low vision and use screen reading software can find it hard to hear the screen reader's speech output if there is other audio playing at the same time. If automatically playing audio lasts more than three seconds, an easily located, accessible mechanism must be provided to pause or stop the audio or control the audio volume. An audio control allows screen reader users to hear the screen reader without other sounds playing.",
    "ruleDescription": "Ensures <video> or <audio> elements do not autoplay audio for more than three seconds without a control mechanism to stop or mute the audio.",
    "theAlgorithm": "The algorithm for this rule returns:Undefined when <audio> has no source (duration cannot be interpreted).Undefined when <video> has no source (duration cannot be interpretedFalse when <audio> can autoplay and has no controls mechanism.False when <video> can autoplay and has no controls mechanismFalse when <audio> plays less than three seconds but loops.True when <video> can autoplay and duration is less than three seconds (by passing options).True when <video> can autoplay and duration is below allowed duration (by setting playback range).True when <audio> can autoplay but has controls mechanism.True when <video> can autoplay and has controls mechanism.",
    "disabilitiesAffected": "Blind,Deafblind,Cognitive",
    "requirements": "Experimental rule",
    "wcagSuccessCriteria": "1.4.2 Audio Control",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "autocomplete-valid": {
    "id": 33,
    "ruleId": "autocomplete-valid",
    "userImpact": "Serious",
    "wcag": "1.3.5",
    "howToFixTheProblem": "Identify any form elements that accept an individual's personal data. For each form element that accepts an individual's personal data: Check to see if the personal data is one of the 53 types identified in WCAG 2.1 Section 7 Input Purposes for User Interface Components opens in a new window. Confirm that the autocomplete attribute is set with the appropriate value to identify the purpose of that UI component.",
    "whyItMatters": "Failure to provide autocomplete values in form fields results in inaccessible content. Screen readers do not read identified autocomplete form fields if the appropriate autocomplete attribute values are missing. Users cannot correctly navigate forms when screen readers cannot provide adequate information to the user regarding form field interaction requirements.",
    "ruleDescription": "The purpose for each common input field that collects an individual's personal data is programmatically defined based on the list of 53 Input Purposes for User Interface Components. The autocomplete attribute values must be valid and correctly applied for screen readers to function correctly.",
    "theAlgorithm": "The purpose of each input field collecting information about the user can be programmatically determined when:The input field serves a purpose identified in the Input Purposes for User Interface Components section; and The content is implemented using technologies with support for identifying the expected meaning for form input data.",
    "disabilitiesAffected": "Attention Deficit Blind,Low Vision,Deafblind,Mobility Cognitive",
    "requirements": "WCAG 2.1 (AA): MUST",
    "wcagSuccessCriteria": "1.3.5 Identify Input Purpose",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "landmark-banner-is-top-level": {
    "id": 34,
    "ruleId": "landmark-banner-is-top-level",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure each banner landmark is not contained in another landmark.For each element on the page that uses the role=\"banner\" ARIA landmark, ensure that it is not contained within another ARIA landmark, even though HTML5 allows multiple instances of the equivalent <header> landmark. It is appropriate in most web designs to have only one each of these landmarks, whether they are specified using ARIA or HTML5, and further, that they are not nested within one or more other landmarks.",
    "whyItMatters": "If the banner landmark is not the top-level landmark (and is contained within another landmark), it does not effectively designate the pre-defined header portion of the layout in the design and therefore prevents screen reader users from being able to easily find their way around the layout.",
    "ruleDescription": "Banner landmark must not be contained in another landmark.",
    "theAlgorithm": "This rule finds (banner/contentinfo) landmarks and walks up the document structure verifying that no other landmark roles are encountered before reaching the body.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "p-as-heading": {
    "id": 35,
    "ruleId": "p-as-heading",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Ensure p elements are not used to style headings.Best practice: Start the main content with an h1 element: Usually, the best practice is to start the main content of a web page with a level 1 heading (h1), with no other headings before this high-level heading. Mark sub-sections of the page as level 2 headings (h2). If there are sub-sections within the level 2 sections, they should be marked as level 3 (h3) and so on. Anything that comes before the main content of the page should not be marked up with any headings at all, though this is not an iron-clad rule. One of the main reasons that the h1 should appear at the beginning of the main content is because screen reader users can use keyboard shortcuts to navigate directly to the first h1, which, in principle, should allow them to jump directly to the main content of the web page. If there is no h1, or if the h1 appears somewhere other than at the start of the main content, screen reader users have to listen to more of the web page to understand its structure, wasting valuable time.As with all best practice recommendations, exceptions exist in which it doesn't make sense to start the content with h1, or when it may be best to put other headings before the content, but the exceptions do not apply to the vast majority of web pages.",
    "whyItMatters": "The underlying purpose of headers is to convey the structure of the page. Sighted users can see structure by using different sizes of text. Screen reader users, though, require heading elements to be marked up explicitly. When heading elements are properly applied the page becomes much easier to navigate for screen reader users and sighted users alike.In the same way that sighted users can glance at a page and get a sense of its contents, users of screen readers can do the same by navigating through headings. Well written and properly ordered headings can save users, especially those who use screen readers, a lot of time and frustration.The purpose of headings is to describe the structure of the webpage, not just highlight important text. They should be brief, clear, unique, and marked with h1 through h6 elements in hierarchical order. All of these qualities make headings are a valuable tool for users of screen readers. In the same way that sighted users can glance at a page and get a sense of its contents, users of screen readers can do the same by navigating through headings. Well written and properly ordered headings can save users, especially those who use screen readers, a lot of time and frustration.In addition to making the page more accessible, headings have other benefits, since search engines use headings when filtering, ordering, and displaying results. Improving the accessibility of your site can also have the effect of making your page more findable.",
    "ruleDescription": "Styled p elements must not be used to represent headings because the structure of the document cannot otherwise be determined by screen reader users.",
    "theAlgorithm": "Ensures that paragraph elements do not use italic, bold or font size to give the appearance of headings.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "button-name": {
    "id": 36,
    "ruleId": "button-name",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Ensure that each button element and elements with role=\"button\" have one of the following characteristics:Inner text that is discernible to screen reader users. Non-empty aria-label attribute. aria-labelledby pointing to element with text which is discernible to screen reader users. role=\"presentation\" or role=\"none\" (ARIA 1.1) and is not in tab order (tabindex=\"-1\").",
    "whyItMatters": "Screen reader users are not able to discern the purpose of elements with role=\"link\", role=\"button\", or role=\"menuitem\" that do not have an accessible name.",
    "ruleDescription": "Buttons must have discernible text that clearly describes the destination, purpose, function, or action for screen reader users.The input-button-name rule separates functionality from the button-name rule to ensure that input buttons have discernible text; advise relevant to input button names was incorrect for button elements.",
    "theAlgorithm": "Checks all buttons to ensure that they have a discernable, accessible name.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "aria-required-parent": {
    "id": 37,
    "ruleId": "aria-required-parent",
    "userImpact": "Critical",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Ensure all ARIA roles are contained by their required parent element, if any.The relationship properties available in ARIA are the following:aria-activedescendant aria-controls (used primarily by elements where the role is group, region, or widget) aria-describedby aria-flowto (used primarily to provide alternate reading/tab order to skip past ads or complementary regions) aria-labelledby aria-owns (used primarily to identify which elements belong to the group) aria-posinset aria-setsize ARIA allows you to communicate relationship information to screen readers, which specifies relationships between items (for example, aria-owns, aria-controls, both of which describe a kind of parent-child relationship where one item owns or controls another).",
    "whyItMatters": "For each role, WAI-ARIA explicitly defines which child and parent roles are allowable and/or required. Elements containing ARIA role values missing required parent element role values will not enable assistive technology to function as intended by the developer.When it is necessary to convey context to the user of assistive technology in the form of hierarchy (for example, the importance of a parent container, item or sibling in a folder tree), and the hierarchy is not the same as the code structure or DOM tree, there is no way to provide the relationship information without the use of ARIA role parent elements.",
    "ruleDescription": "Certain ARIA roles must be contained by particular parent roles in order to perform the intended accessibility functions.",
    "theAlgorithm": "Checks all elements that contain a WAI-ARIA role to ensure that all required parent roles are present",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-required-children": {
    "id": 38,
    "ruleId": "aria-required-children",
    "userImpact": "Critical",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Ensure elements including explicit or implicit ARIA roles include required children elements.The following attribute values indicate relationships between element that cannot be readily determined from the document structure. The relationships are linked to characteristics tables that list explicit and implicit role attribute values as well as role attribute values inherited by nested children elements.aria-activedescendant aria-controls aria-describedby aria-flowto aria-labelledby aria-owns aria-posinset aria-setsize role=\"combobox\" For similar (opposite) information, refer to Certain ARIA roles must be contained by particular parents.",
    "whyItMatters": "For each role, WAI-ARIA explicitly defines which child and parent roles are allowable and/or required. ARIA roles missing required child roles will not be able to perform the accessibility functions intended by the developer.Assistive technology needs to convey the context to the user. For example, in a treeitem, it is important to know the parent (container), item, or siblings in the folder. This can be done in two ways:Code order or DOM: The necessary context is often clear from the code order or DOM. ARIA: ARIA (such as aria-owns) can be used provide the relationships when the hierarchy is not the same as the code structure or DOM tree.",
    "ruleDescription": "Some ARIA parent role values applied to elements must contain specific child elements and role values to perform intended accessibility function.",
    "theAlgorithm": "Checks all elements that contain a WAI-ARIA role to ensure that all required children roles are present.Resources",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "landmark-complementary-is-top-level": {
    "id": 39,
    "ruleId": "landmark-complementary-is-top-level",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "This best practice rule ensures that aside elements or elements with role=complementary are not an internal part of another ARIA landmark. Nesting landmarks create confusing document structures. This rule is similar to existing rules that test this same ARIA requirement for the banner, contentinfo, and main roles.Examples The following example FAILS the Complementary landmarks are at the top level rule:",
    "whyItMatters": "Complementary content is ancillary content to the main theme of a document or page. Screen reader users have the option to skip over complementary content when it appears at the top level of the accessibility API. Embedding an <aside> element in another landmark may disable screen reader functionality allowing users to navigate through complementary content.",
    "ruleDescription": "Ensures the complementary landmark or aside is at top level",
    "theAlgorithm": "Do not include <aside> elements or elements containing role=\"complementary\" within other content marked up as a landmark.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "landmark-contentinfo-is-top-level": {
    "id": 40,
    "ruleId": "landmark-contentinfo-is-top-level",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure any contentinfo landmark is not be contained in another landmark.Text content should be contained within a landmark region, the role=\"contentinfo\" ARIA landmark should be used on an element that is outside of other landmarks used on the page, since footer information is generally separated from the header and main body content.",
    "whyItMatters": "The purpose of the contentinfo landmark can be defeated when placed within another landmark, as it can prevent blind screen reader users from being able to quickly find and navigate to the appropriate landmark.When screen reader users have to sort through too much extra information to find what they're looking for, such as not being able to quickly figure out which landmark contains the content information they're looking for negates the purpose of an existing contentinfo landmark.",
    "ruleDescription": "Contentinfo landmark must be at top level.",
    "theAlgorithm": "This rule finds the elements for the footer:not([role]) and [role=\"contentinfo\"] selectors, then checks to see if the landmark has a body context.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "css-orientation-lock": {
    "id": 41,
    "ruleId": "css-orientation-lock",
    "userImpact": "Serious",
    "wcag": "1.3.4",
    "howToFixTheProblem": "Do not use CSS or other techniques to lock device orientation. Test content orientation views to ensure that content continues to be accessible to all users, including assistive technology users, in any orientation.",
    "whyItMatters": "Assistive technology users may be unable to access orientation features with their devices or assistive technologies.",
    "ruleDescription": "The screen orientation (e.g. portrait or landscape) of mobile applications should not be locked in one mode. Users should be able to change the orientation of their device between portrait and landscape with the page adjusting accordingly in order to remain understandable. Also, when opening a page, it should display in the user’s current orientation.",
    "theAlgorithm": "Content does not restrict its view and operation to a single display orientation, such as portrait or landscape, unless a specific display orientation is essential.",
    "disabilitiesAffected": "Attention Deficit,Dyslexia,Sighted Keyboard Users,Low Vision,Mobility,Cognitive",
    "requirements": "WCAG 2.0 (AA): SHOULD",
    "wcagSuccessCriteria": "1.3.4 Orientation",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "table-fake-caption": {
    "id": 42,
    "ruleId": "table-fake-caption",
    "userImpact": "Serious",
    "wcag": "1.3.1",
    "howToFixTheProblem": "To fix the problem, ensure the table uses an actual caption element instead of cells with a colspan element to visually indicate a caption.To ensure screen reader users can make sense of tabular data, use the caption element for an onscreen title.Example: Simple data table with a caption element",
    "whyItMatters": "Screen readers have a specific way of announcing tables. When tables are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output.When tables are not marked up with an actual caption element instead of using a colspan element on cells to visually indicate a caption, screen reader users cannot correctly perceive the purpose of the table visually.",
    "ruleDescription": "Data table markup can be tedious and confusing. Screen readers have some features to ease table navigation, but tables must be marked up accurately for these features to work correctly. Some tables use cells with a colspan element to visually indicate a caption, instead of using an actual caption element.",
    "theAlgorithm": "Checks that data tables are marked up with table cells that use a colspan element to indicate a caption visually.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "1194.22 (g) Row and column headers for data tables"
  },
  "document-title": {
    "id": 43,
    "ruleId": "document-title",
    "userImpact": "Serious",
    "wcag": "2.4.2",
    "howToFixTheProblem": "Add an informative title to the document using the title element with meaningful text.Ensure that the document's title contains short, descriptive text summarizing the page's contents.Add a title to the document using the title tag. You can do this as follows:A good title is brief, clear, informative, and unique. Ensure that the document's title contains short, descriptive text summarizing the page's contents. To pass this rule, it’s not sufficient to simply have a title element; the element must also contain meaningful text.Be sure to follow these best practices when writing a title:Replace placeholder titles such as “untitled page” with a more appropriate phrase Make each title unique - don’t duplicate titles across pages, even if they are similar. Put all unique information first. If you want to include the company’s name or brand in the title, this information should go after the unique content. Otherwise, users of screen readers will have to listen to this information over and over as they search for the page that interests them. Make the page title match the top heading (ideally labelled as h1) on your page. These don’t need to be identical, but it often makes sense to make them very similar, since the title and h1 elements serve essentially the same purpose. In addition to making the page more accessible, titles have other benefits, since search engines use titles when filtering, ordering, and displaying results. Improving the accessibility of your site can also have the effect of making your page more findable.",
    "whyItMatters": "Screen reader users use page titles to get an overview of the contents of the page. Navigating through pages can quickly become difficult and confusing for screen reader users if the pages are not marked with a title. The page title element is the first thing screen reader users hear when first loading a web page.The title is the first thing that screen reader users hear when they arrive at a page. If there is no title or if the title is not descriptive and unique, screen reader users must read through the page to determine its contents and purpose.",
    "ruleDescription": "The HTML document must have a title element to provide users with an overview of its content, and when present, it must not be empty.",
    "theAlgorithm": "Ensures that each HTML document contains a title.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "2.4.2 Page Titled",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "role-img-alt": {
    "id": 44,
    "ruleId": "role-img-alt",
    "userImpact": "Serious",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Ensure [role='img'] elements have alternate text",
    "whyItMatters": "Screen readers have no way of translating an image into words that gets read to the user, even if the image only consists of text. As a result, it's necessary for images to have short, descriptive and accessible alternative text so screen reader users clearly understand the image's contents and purpose.If you can't see, all types of visual information, including images, are completely useless unless an accessible text alternative is provided which screen readers can convert into either sound or braille. People with low vision or color-blindness disabilities also require accessible alternative text to varying degrees.Screen readers cannot convert visual image information to speech or braille in the absence of an accessible text alternative associated with the image.",
    "ruleDescription": "Ensures elements marked role=\"img\" elements have alternate text.",
    "theAlgorithm": "Elements with the role=\"img\" attribute value must also contain markup specifying accessible alternative text describing the image.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "focus-order-semantics": {
    "id": 45,
    "ruleId": "focus-order-semantics",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure all elements in the focus order have an appropriate role attribute value, and if the element is a custom widget, that correspond to valid ARIA role attribute values are applied.Ensure all device-independent user input methods have appropriate roles to enable interaction with form content.When no role exists at all, when focusing on the element, the screen reader will not announce anything.When an inappropriate role like paragraph is used for an interactive element, the element will not receive focus, and the screen reader will not announce anything.If the role matches a list of roles that could be an interactive element (for example, button, text input, radio option, checkbox, etc.), if native HTML, no extra roles are required, but if it is a custom widget you need an aria role that makes sense, such as role=\"button\".If a screen reader user lands on the element and it has text, it will read the text, but the user will not know what the element is without an appropriate role.Available roles by type are:Landmark: article, banner, complementary, main, navigation, region, search, contentinfo Widget: alert, alertdialog, application, dialog, group, log, marquee, menu, menubar, menuitem, menuitemcheckbox, menuitemradio, progressbar, separator, slider, spinbutton, status, tab, tablist, tabpanel, timer, toolbar, tooltip, tree, treegrid, treeitem Pseudo HTML: button, button, checkbox, columnheader, combobox, contentinfo, form, grid, gridcell, heading, img, link, listbox, listitem, option, radio, radiogroup, row, rowgroup, rowheader, scrollbar, textbox, checkbox, columnheader, combobox, contentinfo, form, grid, gridcell, heading, img, link, listbox, listitem, option, radio, radiogroup, row, rowgroup, rowheader, scrollbar, textbox Document: document (when creating a document region inside an other type of region) Application: application (only around a widget to enable normal keyboard shortcuts for page content) Presentation: presentation (to cancel the native role of the element) Other Semantic: math, definition, note, directory Abstract: command, composite, input, landmark, range, section, sectionhead, select, structure, widget",
    "whyItMatters": "Elements in the focus order need a role appropriate for interactive content so that screen reader technology can communicate that information to users.If interactive content elements do not have appropriate roles, the role will not be able to perform the accessibility function intended by the developer.When screen readers and other assistive technologies do not know the appropriate role of each element on the web page, they are not able to interact with it intelligently, nor are they able to communicate the role to the user. When the value for a role is not valid, there is no way the HTML element's set of features, properties, and methods of conveying information to and/or from the user can be communicated via assistive technologies.",
    "ruleDescription": "User input elements must have appropriate roles, whether native HTML or a custom widget, to convey to screen reader users their meaning when landed on and given focus. If a custom widget, appropriate ARIA role values must be used instead of abstract roles to correctly expose the purpose of the element.",
    "theAlgorithm": "Checks all interactive elements in the focus order to ensure that the role attribute value is valid and appropriate, whether native HTML or a custom ARIA widget.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Note: Experimental rule",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-allowed-attr": {
    "id": 46,
    "ruleId": "aria-allowed-attr",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "ARIA explicitly defines which attributes are allowed for any given role and for every attribute, where that attribute may be used. The detailed information on each attribute can be found by looking at the documentation for each role and/or each attribute.Specific Reference: For more information about which ARIA attributes may or should not be used by HTML element, see ARIA in HTML - Document conformance requirements for use of ARIA attributes in HTML opens in a new window.General Reference: For general information about what ARIA can do, refer to the following external sources of information. ARIA is primarily to be used by web developers and programmers, because implementing ARIA usually requires JavaScript skills. Learning ARIA can also take a fair amount of time because of the complexities of the programming logic and also the nuances of ensuring that ARIA role-attribute combinations are valid.WAI-ARIA Overview opens in a new window WAI-ARIA 1.1 opens in a new window WAI-ARIA Authoring Practices opens in a new window",
    "whyItMatters": "Using ARIA attributes in roles where they are not allowed can interfere with the accessibility of the web page. Using an invalid role-attribute combination will, at best, result in no effect on the accessibility of the application and, at worst, may trigger behavior that disables accessibility for entire portions of an application.When ARIA attributes are used on HTML elements that are not in accordance with WAI-ARIA 1.1, they conflict with the semantics of the elements which can cause assistive technology products report nonsensical user interface (UI) information that does not represent the actual UI of the document.",
    "ruleDescription": "Not all ARIA role-attribute combinations are valid. This Rule checks that each role is supplied with allowed attributes.",
    "theAlgorithm": "Checks that each element with an ARIA role uses only ARIA attributes allowed for that role.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "tabindex": {
    "id": 47,
    "ruleId": "tabindex",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "There are two main ways to avoid using tabindex with a value greater than 0. The first method is to change the tabindex to 0. Note that this may change the order in which the user tabs through the elements. The second method is to remove the tabindex entirely and modify the structure of the page so that a user tabbing through elements reach them in the order initially desired.A third method is to change the tabindex to tabindex=\"-1\" and add Javascript. This removes the element from the tab order until you use Javascript changes the \"-1\" to a \"0\".Adding Items to the Tab Order Using tabindex=\"0\" or tabindex=\"-1\" + JavaScript Only links and form elements can receive the tab focus under normal conditions. Most of the time it is best to not add other items (such as <p>, <th>, <span>, etc.) to the tab flow, but under some exceptional circumstances — such as some kinds of complex interactive JavaScript widgets — it can make sense to add items to the tab flow that would not normally receive the tab focus. There are two ways to accomplish this:tabindex=\"0\" tabindex=\"-1\" + JavaScript",
    "whyItMatters": "Using tabindex with a value greater than 0 can create as many problems as it solves. It creates an unexpected tab order, which makes the page less intuitive and can give the appearance of skipping certain elements entirely.Here are some of the problems that tabindex (with a value of 1 or greater) causes:Unexpected tab order: From the perspective of the user, tabindex changes the default tab order in unexpected ways, possibly causing disorientation. Items can appear to be skipped entirely: Items appear in the tab order only once. If a user tabs past the tabindex items and continues through the rest of the web page, at some point the user arrives at the location of the tabindex items, but the tabbing process skips over these links, because the user already tabbed through them at the beginning of the cycle. Incorrect tab orders are frustrating when users are unable access items, and may not know that (s)he needs to cycle through the entire set of links on the page to reaccess those links. All tabindex items are tabbed to before any non-tabindex items. If you want to change the tab order of the first items AND of a section later in the page, you would need to set the tabindex value for every single item through to the end of the modified section. Taken to a bit of an extreme, if you have 20 links on a page, and if you set the tabindex of one of those links to tabindex=\"100\", the user tabs to that link first, even though there are fewer than 100 links on the page. There is no way to modify the tab order of sections later in the page unless you manually set the tab order of all the links before that section.",
    "ruleDescription": "A tabindex attribute must never have a value greater than 0 to prevent an unexpected tab order that can give the appearance of skipping some elements entirely.",
    "theAlgorithm": "Ensures that explicit tabindex attributes that are greater than 0 are never used",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "presentation-role-conflict": {
    "id": 48,
    "ruleId": "presentation-role-conflict",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "The presentation-role-conflict rule has two markup patterns that pass test criteria:",
    "whyItMatters": "There are certain cases where the semantic role of an element with role=\"none\" or role=\"presentation\" does not resolve to none or presentation (respectively). When this happens, the element is not removed from the accessibility tree (as expected) and screen readers are able to interact with it.To ensure the element remains removed from the accessibility tree, you should not add any global ARIA attributes to the element or make if focusable",
    "ruleDescription": "Ensures elements which are marked to be removed from the accessibility tree are in fact removed",
    "theAlgorithm": "Checks all elements with role=“none” or role=“presentation” to ensure they do not have a global ARIA attribute and are not focusable",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-text": {
    "id": 49,
    "ruleId": "aria-text",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "The role=\"text\" attribute should be put on an element with no focusable descendants.",
    "whyItMatters": "When a text node is split by markup (e.g. <h1>Hello <span>World</span></h1>) VoiceOver will treat it as two separate phrases instead of just one. Adding role=\"text\" around the elements solves the problem. However, it also overrides the role of the element and all descendants and treats them all as text nodes. If one of the descendant elements is also focusable it would create an empty tab stop. That is, you could tab to the element but VoiceOver would not announce its name, role, or value.",
    "ruleDescription": "Elements with role=\"text\" must not have focusable descendants.",
    "theAlgorithm": "Checks all elements with role=\"text\" to ensure that they do not have focusable descendants.",
    "disabilitiesAffected": "Blind,Mobility",
    "requirements": "WCAG 2.0 (A): SHOULD",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "identical-links-same-purpose": {
    "id": 50,
    "ruleId": "identical-links-same-purpose",
    "userImpact": "Minor",
    "wcag": "2.4.9",
    "howToFixTheProblem": "Identical links must describe the same purpose in order to prevent user confusion. The description lets a user distinguish any one link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. The URI of the destination is generally not sufficiently descriptive.The intent of this Success Criterion is to help users understand the purpose of each link in the content, so they can decide whether they want to follow it.Markup Examples that work The following examples are preceded by a link to the technique reference page of origination:Using aria-label for link purpose Example: Describing the purpose of a link in HTML using aria-label:",
    "whyItMatters": "This rule is important because the intention is to to help users understand the purpose of each link in the content, so they can decide whether they want to follow it. Best practice is that links with the same destination would have the same descriptions, but links with different purposes and destinations would have different descriptions (see also Success Criterion 3.2.4 which calls for consistency in identifying components that have the same functionality). Because the purpose of a link can be identified from its link text, links can be understood when they are out of context, such as when the user agent provides a list of all the links on a page.",
    "ruleDescription": "Ensure that links with the same accessible name serve a similar purpose.",
    "theAlgorithm": "The algorithm for this rule returns:Undefined for native link with href attribute value but with no accessible name.Undefined when an ARIA link has no accessible name.Undefined when an ARIA link has only any combination of unicode (emoji, punctuations, nonBmp) characters as the accessible name.True for native links with href attribute value and an accessible name.True for ARIA links that have accessible names (e.g., an >area< with >map< which is used in an >img< element).True for native links with href attribute values and an accessible name (that also has emoji, nonBmp and punctuation characters).",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "WCAG 2.0 (AAA): MUST",
    "wcagSuccessCriteria": "2.4.9 Link Purpose (Link Only)",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "scrollable-region-focusable": {
    "id": 51,
    "ruleId": "scrollable-region-focusable",
    "userImpact": "Moderate",
    "wcag": "2.4.7",
    "howToFixTheProblem": "The key to getting a scrollable region to be accessible with the keyboard is to ensure that a keyboard-only user can focus the scrollable region itself or a static text item within the scrollable region",
    "whyItMatters": "Checks scrollable content for focusable elements enabling keyboard navigation. Keyboard navigation should not fail when focus moves to an element within a scrollable region.",
    "ruleDescription": "Elements that have scrollable content should be accessible by keyboard",
    "theAlgorithm": "Ensure that scrollable region has keyboard access.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "2.4.7 Focus Visible",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "landmark-no-duplicate-main": {
    "id": 52,
    "ruleId": "landmark-no-duplicate-main",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure there is a navigation point to the primary content of the page. If the page contains iframe elements, each iframe should contain either no main landmarks or just one.Ensure all content is contained within a landmark region, designated with HTML5 landmark elements and/or ARIA landmark regions.It is a best practice to use both HTML 5 and ARIA landmarks to ensure all content is contained within a navigational region. In HTML5, you should use elements like header, nav, main, and footer. Their ARIA counterparts are role=\"banner\", role=\"navigation\", role=\"main\", and role=\"contentinfo\", in that order. By using both HTML5 and ARIA markup, you make the webpage more robust and functional no matter what screen reader technology is used.Once added, screen reader users can navigate to a section based on its ARIA landmark or HTML element. Landmarks provide a simple replacement for a skip navigation link, though the replacement is only useful for users of screen readers. Sighted users or users of screen enlargers wouldn’t get much benefit from the addition, so it can’t replace skip navigation links altogether.",
    "whyItMatters": "Navigating a web page is far simpler for screen reader users if all of the content splits between one or more high-level sections. Content outside of these sections is difficult to find, and its purpose may be unclear.HTML has historically lacked some key semantic markers, such as the ability to designate sections of the page as the header, navigation, main content, and footer. Using both HTML5 elements and ARIA landmarks in the same element is considered a best practice, but the future will favor HTML regions as browser support increases.",
    "ruleDescription": "It is a best practice to ensure that there is only one main landmark to navigate to the primary content of the page and that if the page contains iframe elements, each should either contain no landmarks, or just a single landmark.",
    "theAlgorithm": "Ensures the document has at most one main landmark.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "label": {
    "id": 53,
    "ruleId": "label",
    "userImpact": "Critical",
    "wcag": "1.3.1, 4.1.2",
    "howToFixTheProblem": "Programmatically associate labels with all form controls. The recommended method for most circumstances is to use the label element and an explicit association using the for and id attributes. The examples here are ordered from the most common acceptable solution to the least common acceptable solution.",
    "whyItMatters": "Effective form labels are required to make forms accessible. The purpose of form elements such as checkboxes, radio buttons, input fields, etcetera, is often apparent to sighted users, even if the form element is not programmatically labeled. Screen readers users require useful form labels to identify form fields. Adding a label to all form elements eliminates ambiguity and contributes to a more accessible product.When labels for form elements are absent, screen reader users do not know the input data expectations. Screen readers cannot programmatically determine information about input objects without an established label relationship (or redundant text serving as a label).The absence of labels prevent fields from receiving focus when read by screen readers, and users with impaired motor control do not get the benefit of a larger clickable area for the control since clicking the label activates the control.",
    "ruleDescription": "Each form element must have a programmatically associated label element.",
    "theAlgorithm": "Ensures that every form element has a programmatically associated label.",
    "disabilitiesAffected": "Blind,Low Vision,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships 4.1.2 Name, Role, Value",
    "section508Guidelines": "1194.22 (n) Information required to complete electronic forms online"
  },
  "label-title-only": {
    "id": 54,
    "ruleId": "label-title-only",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Provide every form control a label using aria-label, aria-labelledby<label> or explicit <label>.Using aria-label and aria-labelledby Most of the time it is best to use standard form labels using the <label> tag. The <label> tag is by far the most useful and most widely-supported method of labeling form elements, especially among older browsers and older screen readers. There are, however, certain circumstances that require more flexible methods of labeling objects. One limitation of the <label> tag is that it can be associated with only one form element. If circumstances require a more complex labeling structure, the <label> tag is insufficient. This is where aria-label and aria-labelledby come in.The aria-label attribute allows you to add a label directly to pretty much any HTML element, including form elements, paragraphs, tables, and more.",
    "whyItMatters": "The title and aria-describedby attributes are used to provide additional information such as a hint. Hints are exposed to accessibility APIs differently than labels and as such, this can cause problems with assistive technologies.When form inputs such as text entry fields, radio buttons, check boxes, and select menus contain no labels other than title and aria-describedby attribute values, screen readers interpret the content as advisory information only. Labels created by the title and aria-describedby values are not sufficient to create a true label that can be determined programmatically from the code to convey the purpose of the input form element",
    "ruleDescription": "Form <input> elements may be given a title using the title or aria-describedby attributes (but not both). These attributes are used to provide additional information such as a hint.",
    "theAlgorithm": "Ensures that every <input> that requires a label is has a label other than the title or aria-describedby attributes.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "form-field-multiple-labels": {
    "id": 55,
    "ruleId": "form-field-multiple-labels",
    "userImpact": "Moderate",
    "wcag": "3.3.2",
    "howToFixTheProblem": "Ensure that only one label is assigned to a form field.",
    "whyItMatters": "Assigning multiple labels to the same form field can cause problems for some combinations of screen readers and browsers, and the results are inconsistent from one combination to the next. Some combinations will read the first label. Some will read the last label. Others will read both labels",
    "ruleDescription": "Ensures form field does not have multiple labels.",
    "theAlgorithm": "Ensures form field does not have multiple labels.",
    "disabilitiesAffected": "Blind,Low Vision,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): SHOULD",
    "wcagSuccessCriteria": "3.3.2 Labels or Instructions",
    "section508Guidelines": "1194.22 (n) Information required to complete electronic forms online"
  },
  "frame-focusable-content": {
    "id": 56,
    "ruleId": "frame-focusable-content",
    "userImpact": "Serious",
    "wcag": "2.1.1",
    "howToFixTheProblem": "The frame-focusable-content rule is inapplicable for frames without tabindex, or with a non-negative tabindex:",
    "whyItMatters": "When a frame has a negative tabindex, the browser is prevented from redirecting the focus to the content inside that frame. This causes all its content from getting skipped in keyboard navigation, and if the frame is scrollable also prevents the focus from reaching any element from which the frame can be scrolled with the keyboard.",
    "ruleDescription": "%lt;frame%gt; and %lt;iframe%gt; elements with focusable content must not have tabindex=\"-1\".",
    "theAlgorithm": "Check all <frame> and <iframe> elements that have a negative tabindex number, such as tabindex=\"-1\". If there are such frames, check that they do not contain focusable elements, or have nested frames with focusable elements.",
    "disabilitiesAffected": "Blind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "2.1.1 Keyboard",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "frame-tested": {
    "id": 57,
    "ruleId": "frame-tested",
    "userImpact": "Critical",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure iframe and frame elements contain the axe-core script.The after - function (optional) check is the function that gets called for checks that operate on a page-level basis, to process the results from the iframe elements.The pageLevel Ensures iframe and frame elements contain the axe-core script rule, when set to true, is only applied when the entire page is tested. Results from nodes on different frames are combined into a single result.",
    "whyItMatters": "Without the axe-core script, it is not possible for the tool to perform violation checking on multiple levels of nested iframes.",
    "ruleDescription": "Frames must be tested with axe-core.",
    "theAlgorithm": "The iframes property, when set to true, tells axe to run inside iframes. This uses both frame and iframe selectors to check for the axe-core script to return a \"review item\" result.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Deafblind",
    "requirements": "Needs Review",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "frame-title-unique": {
    "id": 58,
    "ruleId": "frame-title-unique",
    "userImpact": "Serious",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure all frame and iframe elements have titles that are not repeated.",
    "whyItMatters": "Screen reader users rely on a frame title to describe the contents of the frame. Navigating through frames and iframes can quickly become difficult and confusing for users of this technology if the frames are not marked with a title attribute.Screen reader users have the option to pull up a list of titles for all frames on a page. Adding descriptive, unique titles allows users to quickly find the frame they need. If no titles are present, navigating through frames can quickly become difficult and confusing. If no title is listed, screen readers will instead give information like “frame,” “javascript,” the filename, or the URL. In most cases, this information won’t be very helpful.",
    "ruleDescription": "All frame or iframe elements in the document must have a unique title to describe their contents to screen reader users.",
    "theAlgorithm": "Ensure that all iframe and frame elements contain a unique and non-empty title attribute.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "frame-title": {
    "id": 59,
    "ruleId": "frame-title",
    "userImpact": "Serious",
    "wcag": "2.4.1, 4.1.2",
    "howToFixTheProblem": "Ensure all frame and iframe elements have valid title attribute values.",
    "whyItMatters": "Screen reader users rely on a frame title to describe the contents of the frame. Navigating through frame and iframe elements quickly becomes difficult and confusing for users of this technology if the markup does not contain a title attribute.Screen reader users have the option to pull up a list of titles for all frames on a page. Adding descriptive, unique titles allows users to quickly find the frame they need. If no titles are present, navigating through frames can quickly become difficult and confusing. If no title is listed, screen readers will instead give information like “frame,” “JavaScript,” the filename, or the URL. In most cases, this information won’t be very helpful.",
    "ruleDescription": "All frame or iframe elements in the document must have a title that is not empty to describe their contents to screen reader users.",
    "theAlgorithm": "Ensure that all iframe and frame elements contain a unique and non-empty title attribute.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "2.4.1 Bypass Blocks 4.1.2 Name, Role, Value",
    "section508Guidelines": "1194.22 (i) Frame titles for identification and navigation"
  },
  "heading-order": {
    "id": 60,
    "ruleId": "heading-order",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure headings are in a logical order. For example, check that all headings are marked with h1 through h6 elements and that these are ordered hierarchically. For example, the heading level following an h1 element should be an h2 element, not an h3 element. Finally, don't use heading mark up on text that isn't actually a heading.To ensure you are writing effective headings, read through the headings on the page and ask yourself if you get a general sense of the page’s contents based only on the information provided by the headings. If the answer is “no”, consider rewriting your headings. While you are at it, be sure that you are using the heading markup (h1 through h6's) if and only if you are writing a heading. While applying such markup is a quick way to make text stand out, using it for anything other than headings will make navigating a web page more confusing for users of assistive technology.",
    "whyItMatters": "The underlying purpose of headers is to convey the structure of the page. For sighted users, the same purpose is achieved using different sizes of text. Text size, however, is not helpful for users of screen readers, because a screen reader identifies a header only if it is properly marked-up. When heading elements are applied correctly, the page becomes much easier to navigate for screen reader users and sighted users alike.In the same way that sighted users can glance at a page and get a sense of its contents, users of screen readers can do the same by navigating through headings. Well written and properly ordered headings can save users, especially those who use screen readers, a lot of time and frustration.The purpose of headings is to describe the structure of the webpage, not just highlight important text. They should be brief, clear, unique, and marked with h1 through h6 elements applied in hierarchical order. All of these qualities make headings valuable tools for screen reader users. Similar to the way sighted users can glance at a page and get a sense of its contents, screen reader users can navigate through headings. Well written and properly ordered headings can save screen reader time and frustration.In addition to making the page more accessible, headings have other benefits since search engines use headings when filtering, ordering, and displaying results. Improving the accessibility of your site can also have the effect of making your page more findable.",
    "ruleDescription": "Headings must be in a valid logical order, meaning h1 through h6 element tags must appear in a sequentially-descending order.",
    "theAlgorithm": "Ensures the order of headings is semantically correct.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "empty-heading": {
    "id": 61,
    "ruleId": "empty-heading",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "It is a best practice to ensure all heading elements (those marked with <h1> through <h6>) contain content. Furthermore, be sure that this content can be accessed by a screen reader; this means that the heading text must NOT be hidden (for example, using CSS display: none or aria-hidden=\"true\").To ensure you are writing effective headings, read through the headings on the page and ask yourself if you get a general sense of the page’s contents based only on the information provided by the headings. If the answer is “no”, consider rewriting your headings.While you are at it, be sure that you are using the heading markup (<h1> through <h6> elements) if and only if you are writing a heading. Headings should be brief, clear, unique, and marked with levels in hierarchical order to convey the structure of the webpage.",
    "whyItMatters": "Screen readers alert users to the presence of a heading tag. If the heading is empty or the text cannot be accessed, this could either confuse users or even prevent them from accessing information on the page's structure.If the text inside a heading cannot be accessed by a screen reader, users of this technology will not be able to hear the contents of the heading. Since headings relay the structure of a webpage, it's crucial that users of screen readers are able to access the contents.Applying heading markup (<h1> through ><h6>) is a quick way to make text stand out, however, using it for anything other than headings will make navigating a web page more confusing for users of assistive technology.In addition to making the page more accessible, headings have other benefits, since search engines use headings when filtering, ordering, and displaying results. Improving the accessibility of your site can also have the effect of making your page more findable.In the same way that sighted users can glance at a page and get a sense of its contents, users of screen readers can do the same by navigating through headings. Well written and properly ordered headings can save users, especially those who use screen readers, a lot of time and frustration.",
    "ruleDescription": "When at least one heading element (marked by <h1> through <h6>) is present, it is a best practice to ensure it contains content.",
    "theAlgorithm": "Ensures that headings contain content and that this content is accessible by a screen reader.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "hidden-content": {
    "id": 62,
    "ruleId": "hidden-content",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "You need to trigger the display of this content to analyze it. A failure indicates problems analyzing the content on the page under test, whereas when \"incomplete,\" there may be hidden items identified that must be exposed to be analyzed. Passing this rule (in other words, no violations found) indicates it was possible to analyze all of the content on the page, and the test identified no hidden content.As one of Deque's experimental rules, the Hidden Content rule automatically alerts you to the fact that there is visually hidden content on the page under test. Various techniques exist for hiding elements and their contained content from either screen readers only, or from sighted users only. It is also possible to hide text from both sighted users and screen reader users simultaneously (for example, by using CSS properties including display: none or visibility: hidden). All such techniques can prevent the content from being analyzed for accessibility problems, so as with CSS-generated text, use these techniques with caution. Depending on the technique used to hide content, the solution lies in using the appropriate techniques to expose it so that it can then be analyzed.",
    "whyItMatters": "Hidden content cannot be automatically analyzed for accessibility rule violations.Visually hidden content must be accessible by both sighted and screen reader users. If there is a compelling reason to hide content from sighted users, there is usually a compelling reason also to hide that content from blind users. When the content is made available to sighted users, it makes sense to make it available to blind users as well.Content will be hidden from screen reader users (and all sighted users too) when the CSS properties display: none or visibility: hidden are used. Changing CSS properties to display: block, display: inline, or using other display values makes the items available to screen reader users.Rule Description",
    "ruleDescription": "Informs users about hidden content that cannot be analyzed for accessibility violations.",
    "theAlgorithm": "Checks CSS style property values of display: none; and visibility: hidden; and alerts users to the presence of hidden item content requiring further review.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Colorblindness",
    "requirements": "Experimental rule",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "duplicate-id-active": {
    "id": 63,
    "ruleId": "duplicate-id-active",
    "userImpact": "Critical",
    "wcag": "4.1.1",
    "howToFixTheProblem": "Rename attributes that reuse an ID on active, focusable elements.Duplicate active IDs are common validation errors that can break the accessibility of labels for focusable elements, forms, table header cells, etc.To fix the problem, change the duplicate ID value to ensure each ID is unique. Unique ID values differentiate each focusable element from another and prevent invalid markup and the active ID instance is acted upon by client-side scripting, or where assistive technologies typically only reference the active ID of repeated elements.Good markup eliminates at least one possible source of accessibility problems. WCAG 1.0 used to have a provision which explicitly required the use of valid markup. That requirement has been taken out of WCAG 2.0. We mention it here because valid markup is a quick path toward ensuring accessibility. Most validation issues are usually inconsequential for accessibility (e.g., un-encoded ampersands). Other ID validation errors are very important and may cause issues relating to how assistive technology interacts with the page and renders the page to the end user.One way to test the validity of HTML markup in order to quickly identify reused attribute ID values is to submit the code through the W3C validator at http://validator.w3.org.",
    "whyItMatters": "The ID attribute uniquely identifies focusable elements on a page. It does not make sense to duplicate an active ID.Duplicate active ID values break the accessibility of focusable elements including labels for forms, table header cells, etc., Screen readers and client-side scripts will skip any duplication other than the first instance. Validating HTML files help prevent and eliminate possible sources of accessibility problems, when not breaking accessibility.Those experienced with client-side scripting know that when you re-use an active ID, typically the only one that gets acted upon by the scripting is the first instance of the use of that active ID. Similarly, assistive technologies may, when referencing an active ID, only reference the first one accurately.",
    "ruleDescription": "The value assigned to active ID attributes on focusable elements must be unique to prevent the second instance from being overlooked by assistive technology. Put another way, active ID attributes may not be used more than once on focusable elements in the same document; focusable active elements require unique IDs for assistive technology to distinguish one element from another.",
    "theAlgorithm": "Ensures that each focusable element on the page with an active ID has a unique value.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.1 Parsing",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "duplicate-id": {
    "id": 64,
    "ruleId": "duplicate-id",
    "userImpact": "Minor",
    "wcag": "4.1.1",
    "howToFixTheProblem": "Rename any duplicate ID attributes values.Duplicate IDs are common validation errors that may break the accessibility of labels, e.g., form fields, table header cells.To fix the problem, change an ID value if it is used more than once to be sure each is unique. Unique ID's differentiate each element from another and prevent invalid markup, wherein only the first instance gets acted upon by client-side scripting, or where assistive technologies typically only reference the first one accurately.Proper markup eliminates at least one possible source of accessibility problems. WCAG 1.0 used to have a provision which explicitly required the use of valid markup. WCAG 2.0 no longer requires valid markup. We mention it here because valid markup is a quick path toward ensuring accessibility. There are hundreds of ways a person can create invalid markup. Most of these ways are usually inconsequential for accessibility such as un-encoded ampersands, for instance. Others, however, are significant and may cause issues relating to how assistive technology interacts with the page and renders the page to the end user, such as subsequent instances of element attribute ID's being ignored.Submit markup code to the W3C validator at http://validator.w3.org to the validity of HTML markup in order to quickly identify reused attribute ID values.",
    "whyItMatters": "The ID attribute uniquely identifies elements on a page. It does not make sense to duplicate an ID.Duplicate ID's can break the accessibility of labels for forms, table header cells, etc., by the second instance being skipped by screen readers, or by client-side scripts. They are common markup validation errors that can eliminate possible sources of accessibility problems, when not breaking accessibility.Those experienced with client-side scripting know that when you re-use an id, typically the only one that gets acted upon by the scripting is the first instance of the use of that ID. Similarly, assistive technologies may, when referencing an id, only reference the first one accurately.",
    "ruleDescription": "The value assigned to an ID attribute must be unique to prevent the second instance from being overlooked by assistive technology. Put another way; ID attributes may not be used more than once in the same document to differentiate each element from another.",
    "theAlgorithm": "Ensures that each element on the page with an id attribute has a unique id attribute value.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.1 Parsing",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "duplicate-id-aria": {
    "id": 65,
    "ruleId": "duplicate-id-aria",
    "userImpact": "Critical",
    "wcag": "WCAG: 4.1.1",
    "howToFixTheProblem": "Rename any duplicate ID values.Duplicate IDs are common validation errors that may break the accessibility of labels, e.g., form fields, table header cells.To fix the problem, change an ID value if it is used more than once to be sure each is unique. Unique ID's differentiate each element from another and prevent invalid markup, wherein only the first instance gets acted upon by client-side scripting, or where assistive technologies typically only reference the first one accurately.",
    "whyItMatters": "Duplicate IDs are common validation errors that may break the accessibility of labels, e.g., ARIA elements, form fields, table header cells.Unique ID's differentiate each element from another and prevent invalid markup, wherein only the first instance gets acted upon by client-side scripting, or where assistive technologies typically only reference the first one accurately.",
    "ruleDescription": "The value assigned to an id attribute used in ARIA or in form labels must be unique to prevent the second instance from being overlooked by assistive technology. Put another way; ID values used in ARIA and in labels may not be used more than once in the same document to differentiate each element from another.",
    "theAlgorithm": "Ensures every ID used in ARIA attributes and for attribute on a label is unique",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.1 Parsing",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "input-image-alt": {
    "id": 66,
    "ruleId": "input-image-alt",
    "userImpact": "Critical",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Check that the <input type=\"image\"> has a non-empty alt, aria-label or aria-labelledby attribute.Image buttons use the alt attribute as the label. The alt attribute value must be provided, and it must be clear and concise and representative of the action performed when the button is activated by the user (not a description of the image itself).",
    "whyItMatters": "An <input type=\"image\"> button must have alternate text, otherwise screen reader users will not know the button's purpose. Even if the image contains only text, it still requires alternate text, since a screen reader cannot translate images of words into output.Text Alone Is Not A Label: Just typing text next to the form element is not sufficient to create a true label. Assistive technologies like screen readers require labels in code that can be determined programmatically. Some screen readers are programmed to guess what the label should be, based on the surrounding text, but this method is not fool-proof and can lead to confusion if the screen reader guesses wrong.",
    "ruleDescription": "Ensures <input type=\"image\"> elements have alternate text.",
    "theAlgorithm": "Ensures that every <input type=\"image\"> has an accessible name.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "image-alt": {
    "id": 67,
    "ruleId": "image-alt",
    "userImpact": "Critical",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Ensure all informative <img> elements have short, descriptive alternate text and all decorative <img> elements have empty alt attributes (e.g. alt=\"\").There are three main ways to add alternate text to an image:Using an alt attribute i.e. <img alt=\"drawing of a cat\" src=\"...\"> Using an aria-label i.e. <img aria-label=\"drawing of a cat\" src=\"...\"> Using an aria-labelledby attribute i.e. <img arialabelledby=\"someID\" src=\"...\">",
    "whyItMatters": "Screen readers have no way of translating an image into words that gets read to the user, even if the image only consists of text. As a result, it's necessary for images to have short, descriptive alt text so screen reader users clearly understand the image's contents and purpose.If you can't see, all types of visual information, such as images, are completely useless unless a digital text alternative is provided so that screen readers can convert that text into either sound or braille. The same is true in varying degrees for people with low vision or color-blindness.When you do not provide an acceptable alternative that works for their available sensory modalities, such as making an image accessible by providing a digital text description, screen readers cannot convert it into speech or braille to make it available by sound or touch.",
    "ruleDescription": "All images must have alternate text to convey their purpose and meaning to screen reader users.",
    "theAlgorithm": "Ensures that every <img> element has alternative text and either role=\"presentation\" or role=\"none\" (ARIA 1.1).",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "avoid-inline-spacing": {
    "id": 68,
    "ruleId": "avoid-inline-spacing",
    "userImpact": "Serious",
    "wcag": "1.4.12",
    "howToFixTheProblem": "The avoid-inline-spacing rule includes five markup patterns that pass testing criteria:",
    "whyItMatters": "Many people with cognitive disabilities have trouble tracking lines of text when a block of text is single spaced. Providing spacing between 1.5 to 2 allows them to start a new line more easily once they have finished the previous one.",
    "ruleDescription": "Ensure that text spacing set through style attributes can be adjusted with custom stylesheets.",
    "theAlgorithm": "Inline text spacing must be adjustable with custom stylesheets.",
    "disabilitiesAffected": "Attention Deficit Blind, Low Vision, Deafblind, Mobility Cognitive",
    "requirements": "WCAG 2.1 (AA): MUST",
    "wcagSuccessCriteria": "1.4.12 Text Spacing",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "input-button-name": {
    "id": 69,
    "ruleId": "input-button-name",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Eleven markup patterns pass the input-button-name test criteria:",
    "whyItMatters": "Screen reader users are not able to discern the purpose of an input type=\"button\" without an accessible name.Screen reader users cannot understand the purpose of an image without a discernable and accessible textual name. A title for an image may provide only advisory information about the image itself. Unnamed actionable graphic images such as buttons have no clear description of the destination, purpose, function or action for the non-text content when it is intended to be used as a control.",
    "ruleDescription": "Ensures input buttons have discernible text.The input-button-name rule separates functionality from the button-name rule to ensure that input buttons have discernible text; advise relevant to input button names was incorrect for button elements.",
    "theAlgorithm": "Input buttons must have discernible text.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "nested-interactive": {
    "id": 70,
    "ruleId": "nested-interactive",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Interactive control elements must not have focusable descendants.",
    "whyItMatters": "Focusable elements with an interactive control ancestor (any element that accepts user input such as button or anchor elements) are not announced by screen readers and create an empty tab stop. That is, you could tab to the element but the screen reader will not announce its name, role, or state.",
    "ruleDescription": "Interactive controls must not have focusable descendants.",
    "theAlgorithm": "Checks all interactive controls and ensures they do not contain focusable child elements.",
    "disabilitiesAffected": "Blind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "label-content-name-mismatch": {
    "id": 71,
    "ruleId": "label-content-name-mismatch",
    "userImpact": "Serious",
    "wcag": "2.5.3",
    "howToFixTheProblem": "Fix this issue by ensuring that the accessible name — such as the aria-label — contains the text of the visible label in the same order in which it appears. While it is not necessary that the visible label and accessible name match exactly, it is a best practice to have the accessible name begin with the visible text.",
    "whyItMatters": "This rule applies to any element that has:a semantic role that is a widget that supports name from content, andvisible text content, andan aria-label or aria-labelledby attribute.",
    "ruleDescription": "Interactive elements labeled through their content must have their visible label as part of their accessible name",
    "theAlgorithm": "For each user interface component that includes a visible text label, the accessible name MUST match (or include) the visible text in the label.",
    "disabilitiesAffected": "Blind,Low Vision,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "2.5.3 Label in Name",
    "section508Guidelines": "1194.22 (n) Information required to complete electronic forms online"
  },
  "landmark-unique": {
    "id": 72,
    "ruleId": "landmark-unique",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "landmark-unique contains eleven passing markup solutions:",
    "whyItMatters": "landmark-unique is a new best practice rule ensures that landmarks have a unique role or accessible name (i.e. role, label, title) combination.",
    "ruleDescription": "Landmarks must have a unique role or role/label/title (i.e. accessible name) combination.",
    "theAlgorithm": "Ensures landmarks are unique.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "valid-lang": {
    "id": 73,
    "ruleId": "valid-lang",
    "userImpact": "Serious",
    "wcag": "3.1.2",
    "howToFixTheProblem": "Ensure that the language code specified in the lang attribute is a valid language code (e.g. <html lang=\"en\"> would set the language of the document to English).",
    "whyItMatters": "When configuring a screen reader, users select a default language. If the language of a webpage is not specified, the screen reader assumes it is the default language set by the user. Language selection becomes an issue for users who speak multiple languages and access the website in more than one language. It is essential to specify a language and ensure that it is valid so website text is pronounced correctly.Screen readers use different sound libraries for each language, based on the pronunciation and characteristics of that language. Screen readers can switch between these language libraries easily, but only if the documents specify which language(s) to read. If the language is not specified, the screen reader reads the document in the user's default language, resulting in a confusing experience!",
    "ruleDescription": "The language specified in the HTML document must be one of the valid languages to ensure text is pronounced correctly for screen reader users.",
    "theAlgorithm": "lang attribute must have a valid value.",
    "disabilitiesAffected": "Blind,Deafblind,Cognitive",
    "requirements": "WCAG 2.0 (AA): MUST",
    "wcagSuccessCriteria": "3.1.2 Language of Parts",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "link-in-text-block": {
    "id": 74,
    "ruleId": "link-in-text-block",
    "userImpact": "Serious",
    "wcag": "1.4.1",
    "howToFixTheProblem": "Ensure all links that appear in blocks of text have a color contrast difference of at least 3:1 with the surrounding text to ensure that users who cannot distinguish between the colors can still find the link.When the link has no distinct style, and it has a contrast difference of 3:1 or higher, you must manually test to verify that the link gets distinct style on focus and hover.Success Criterion: Ensure color contrast of at least 3:1 for link text.Deque's open-source aXe and browser extensions (for WorldSpace Attest and Comply) products are excellent, reliable tools to help you analyze the contrast ratio of your colors and tell you if they pass the 3:1 ratio guidelines or not.",
    "whyItMatters": "Some people with low vision experience low contrast, meaning that there aren't very many bright or dark areas. Everything tends to appear about the same brightness, which makes it hard to distinguish outlines, borders, edges, and details. Text that is too close in luminance (brightness) to the background can be hard to read.There are nearly three times more individuals with low vision than those with total blindness. One person in twelve has a color deficiency - about 8% of men and 0.4% of women in the US. A person with low vision or color blindness is unable to distinguish text against a background without sufficient contrast.When a sufficient color contrast ratio of 3:1 is not present to distinguish link text color from surrounding text color, users with low vision who experience low contrast cannot detect visually that the text is intended to function as a link.",
    "ruleDescription": "Ensures users who cannot distinguish between colors can tell when text is a link by verifying the link has either a distinct style that does not rely on color or has a contrast difference of greater than 3:1 (which alerts you that manual testing is required).",
    "theAlgorithm": "Checks all links that appear in blocks of text for a color contrast difference of at least 3:1 with the surrounding text to ensure that users who cannot distinguish between the colors can still find the link.This rule looks at common ways to distinguish links from surrounding text, including underline, font styling, border, and background. If the link has a distinct style that does not rely on color, there is no violation (pass). If the link has no distinct style and it has a contrast difference less than 3:1, there is a violation (fail). When the link has no distinct style, and it has a contrast difference of 3:1 or higher, you must verify that the link gets distinct style on focus and hover (manual testing required), as this cannot be automated reliably.",
    "disabilitiesAffected": "Low Vision,Colorblindness",
    "requirements": "WCAG 2.0 (A): SHOULD",
    "wcagSuccessCriteria": "1.4.1 Use of Color",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "link-name": {
    "id": 75,
    "ruleId": "link-name",
    "userImpact": "Serious",
    "wcag": "2.4.4, 4.1.2",
    "howToFixTheProblem": "Ensure that all link names are accessible. It may be possible that the inner link text is not visible to a screen reader, that there are duplicate link labels, or that the link is not focusable.Ensure all links can receive programmatic focus; for example, avoid device-specific events (for example, onmouseover).To ensure all link text is visible to screen readers, link text cannot be hidden (e.g. with display: none or aria-hidden=\"true\").To ensure all links can receive programmatic focus, avoid device-specific Javascript events such as onmouseover(), mouseover(), hover(), onmouseout(), mouseout(). Replace these with device-independent events such as onfocus(), focus(), onblur(), or blur().Do not modify the style of the links to suppress the change in style when a link is the object of programmatic focus. Modifying link styles removes the capability for sighted keyboard users to know where they are on the page. Furthermore, ensure you are creating real links using the a element with the href attribute.",
    "whyItMatters": "Inaccessible link elements pose barriers to accessibility, as they are a fundamental component of a website.Users who rely exclusively on a keyboard (and no mouse) to navigate a webpage can only click on links that can receive programmatic focus. A link that cannot receive programmatic focus is inaccessible to these users.Like sighted users, screen reader users need to know where a link is pointing. Inner link text provides this information, though it won't get used if a screen reader can't access it.Keyboard users, including visually impaired screen reader users or people who cannot use a mouse, can activate only the links and form elements that can receive programmatic focus. Any events activated exclusively by other types of focus, for example onmouseover events that depend on the mouse hover focus, are inaccessible to keyboard users. Only links and form elements receive keyboard focus by default. Modify elements that are not links or form components to receive focus by adding tabindex=\"0\".",
    "ruleDescription": "Link text and alternate text for images, when used as links, must be discernible by a screen reader, must not have a duplicate label, and must be focusable.",
    "theAlgorithm": "Ensures that every link has an accessible name.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "2.4.4 Link Purpose (In Context) 4.1.2 Name, Role, Value",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "landmark-main-is-top-level": {
    "id": 76,
    "ruleId": "landmark-main-is-top-level",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure the main landmark is not contained in another landmark.Ensure all content is contained within a landmark region, designated with HTML5 landmark elements and/or ARIA landmark regions.It is a best practice to use both HTML5 and ARIA landmarks to ensure all content is contained within a navigational region. In HTML5, you should use elements like <header>, <nav>, <main>, and <footer>. Their ARIA counterparts are role=\"banner\", role=\"navigation\", role=\"main\", and role=\"contentinfo\", in that order. By using both HTML5 and ARIA markup, you make the webpage more robust and functional no matter what screen reader technology is used.Once added, screen reader users can navigate to a section based on its ARIA landmark or HTML element. The contentinfo landmark provides a simple replacement for a skip navigation link, though the replacement is only useful for users of screen readers. Sighted users or users of screen enlargers wouldn’t get much benefit from the addition, so it the contentinfo landmark does not replace skip navigation links altogether.",
    "whyItMatters": "Navigating a web page is far simpler for screen reader users if the content splits between some high-level sections. Content outside of these sections is difficult to find, and its purpose may be unclear.HTML has historically lacked some key semantic markers, such as the ability to designate sections of the page as the header, navigation, main content, and footer. Using both HTML5 elements and ARIA landmarks in the same element is considered a best practice, but the future probably favors HTML regions as browser support increases.The HTML Living Standard states \"A hierarchically correct main element is one whose ancestor elements are limited to <html>, <body>, <div>, <form without an accessible name, and autonomous custom elements. Each main element must be a hierarchically correct main element.\" This may reflect a \"best practice\" based on W3C validation.",
    "ruleDescription": "It is a best practice to ensure the main landmark is not contained within another landmark. All content should be contained within distinct regions such as the header (role=\"banner\"), content (role=\"main\"), and footer (role=\"contentinfo\").",
    "theAlgorithm": "Ensures that all content on a page is contained within a landmark region.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "page-has-heading-one": {
    "id": 77,
    "ruleId": "page-has-heading-one",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure that the page or at least one of its frames contains a level-one heading.Generally, it is a best practice to ensure that the beginning of a page's main content starts with a h1 element, and also to ensure that the page contains only one h1 element.Usually the best practice is to start the main content of a web page with a level 1 heading (h1), with no other headings before this high-level heading. Mark the sub-sections of the page as level 2 headings (h2). If the level 2 sections contain sub-sections, mark these children as level 3 sections (h3) and so on.The heading hierarchy of an iframe SHOULD be designed to fit within the heading hierarchy of the parent document, if possible. If you have control over the content of the embedded document in the iframe, the best practice is to fit the iframe heading hierarchy into the proper place within the existing heading hierarchy of the parent page. If the parent document is structured with a single h1 at the top of the content (this is a recommended best practice), the iframe ought to take this into account, and not start with another h1. The iframe document ought to start with h2 if the content is a direct child of the first heading on the page, or if it is a child of a level 2 heading, then the first heading of the iframe should be h3, and so on.When iframes contain content from third-party websites — as is often the case — it is not always possible to control the heading hierarchy. Because of the lack of control in these situations, the guidelines don't strictly require the heading hierarchies of the two documents to match, but it would still be better if they did.",
    "whyItMatters": "Screen reader users can use keyboard shortcuts to navigate directly to the first h1, which, in principle, should allow them to jump directly to the main content of the web page. If there is no h1, or if the h1 appears somewhere other than at the start of the main content, screen reader users must listen to more of the web page to understand its structure, wasting valuable time.Keep in mind that blind users can't just look at a web page and immediately understand its layout the way that a visual user can. Visual users can take in much information about the page layout without having to read all of the content. Blind users don't have that luxury. Screen readers read linearly, which means listening to the entire web page unless there is some other convenient way to get a \"glimpse\" of the page's layout and structure. It turns out that headings are a way to do that. Screen reader users can use keyboard shortcuts to navigate through the heading structure of a document.",
    "ruleDescription": "Ensures that the page, or at least one of its frames, contains an h1 element that appears before the start of the main content to allow screen reader users to use keyboard shortcuts to navigate the heading structure instead of wasting time listening to more of the web page to understand its structure.",
    "theAlgorithm": "This rule finds all elements which match the following selector and verifies that there is at least one: h1:not([role]), [role=\"heading\"][aria-level=\"1\"]",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Low Vision,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "bypass": {
    "id": 78,
    "ruleId": "bypass",
    "userImpact": "Serious",
    "wcag": "2.4.1",
    "howToFixTheProblem": "Ensure each page has a main landmark to provide a mechanism to bypass repeated blocks of content or interface elements (like header and navigation) and quickly arrive at the main content.Landmarks SHOULD be used to designate pre-defined parts of the layout such as the main content section.A page SHOULD NOT contain more than one instance of the main landmark.",
    "whyItMatters": "Since web sites often display secondary, repeated content on multiple pages (such as navigation links, heading graphics, and advertising frames), keyboard-only users benefit from faster, more direct access to the primary content on a page. This reduces keystrokes and minimizes associated physical pain.For users who cannot use a mouse, navigating with a keyboard is more difficult and time-consuming when the interface does not include methods to make keyboard navigation easier. For example, to activate a link in the middle of a web page, a keyboard user may have to tab through a large number of links and buttons in the header and main navigation of the page.At the extreme end, users with severe motor limitations might require several minutes to tab through all of those elements, and can lead to fatigue and possible physical pain for some users. Even users with less severe constraints will require longer than mouse users, who can click on the desired link in a second or two.",
    "ruleDescription": "Each page must have a main landmark to provide a mechanism to bypass repeated blocks of content or interface elements (like header and navigation) and quickly arrive at the main content.",
    "theAlgorithm": "Checks for least one of the following features:an internal skip link a heading a landmark region",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "2.4.1 Bypass Blocks",
    "section508Guidelines": "1194.22 (o) Repetitive navigation link skip method"
  },
  "landmark-one-main": {
    "id": 79,
    "ruleId": "landmark-one-main",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure there is a navigation point to the primary content of the page. If the page contains iframe elements, each iframe should contain either no main landmarks or just one.Ensure all content is contained within a landmark region, designated with HTML5 landmark elements and/or ARIA landmark regions.It is a best practice to use both HTML 5 and ARIA landmarks to ensure all content is contained within a navigational region. In HTML5, you should use elements like header, nav, main, and footer. Their ARIA counterparts are role=\"banner\", role=\"navigation\", role=\"main\", and role=\"contentinfo\", in that order. By using both HTML5 and ARIA markup, you make the webpage more robust and functional no matter what screen reader technology is used.Once added, screen reader users can navigate to a section based on its ARIA landmark or HTML element. Landmarks provide a simple replacement for a skip navigation link, though the replacement is only useful for users of screen readers. Sighted users or users of screen enlargers wouldn’t get much benefit from the addition, so it can’t replace skip navigation links altogether",
    "whyItMatters": "Navigating a web page is far simpler for screen reader users if all of the content splits between one or more high-level sections. Content outside of these sections is difficult to find, and its purpose may be unclear.HTML has historically lacked some key semantic markers, such as the ability to designate sections of the page as the header, navigation, main content, and footer. Using both HTML5 elements and ARIA landmarks in the same element is considered a best practice, but the future will favor HTML regions as browser support increases.",
    "ruleDescription": "It is a best practice to ensure that there is only one main landmark to navigate to the primary content of the page and that if the page contains iframe elements, each should either contain no landmarks, or just a single landmark.",
    "theAlgorithm": "Ensures that all content on a page is contained within a landmark region.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "landmark-no-duplicate-banner": {
    "id": 80,
    "ruleId": "landmark-no-duplicate-banner",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure that individual HTML pages have only banner landmark.Decide which banner landmark you want to keep and remove any other banner landmarks.The role=\"banner\" ARIA landmark should only appear once on an element that is unique to the HTML document even though the HMTL5 specification allows multiple instances of an equivalent header landmark value. It is appropriate in most web designs to have only one banner landmark whether it is specified using ARIA or HTML5.",
    "whyItMatters": "Landmarks allow blind users to navigate and find content quickly. Missing landmarks require screen reader users to sort through too much extra information to find anything.JAWS, NVDA, and VoiceOver support the ability to navigate to sections of a web page using ARIA landmarks. Landmarks provide a more elegant solution to the problem of providing a way for users to skip to the main content of the web page. There is no visible alteration to the web design, making it unobtrusive and invisible. Of course, the fact that this technique is invisible is fine for blind screen reader users, but not so fine for sighted keyboard users or screen enlarger users with low vision. In this sense, HTML 5 regions and ARIA landmarks cannot yet replace the old-fashioned \"skip navigation\" links. Browsers still do not have a built-in way to notify users that HTML 5 regions or ARIA landmarks are present. Screen reader users are the only ones who can take advantage of them. There is a Firefox ARIA landmark extension opens in a new window available, which adds the ability to navigate by landmarks in Firefox, but this is not a native feature of the browser.",
    "ruleDescription": "Ensures the page has at most one banner landmark.",
    "theAlgorithm": "This rule finds all banner landmarks, filters out any landmarks that do not map their role, and verifies that there is no more than one.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "landmark-no-duplicate-contentinfo": {
    "id": 81,
    "ruleId": "landmark-no-duplicate-contentinfo",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure the document has no more than one contentinfo landmark.A page SHOULD NOT contain more than one instance of the contentinfo landmark.",
    "whyItMatters": "One of the main purposes of landmarks is to allow blind users to quickly find and navigate to the appropriate landmark, so you should keep the total number of landmarks relatively low. If you don't, screen reader users will have to sort through too much extra information to find what they're looking for.Despite all of the talk about using correct semantic structure for accessibility, HTML has historically lacked some key semantic markers, such as the ability to designate sections of the page as the header, navigation, main content, and footer. With HTML5, these designations are possible, using the new elements header, nav, main, and footer. Similar functionality is available using the ARIA (Accessible Rich Internet Application) attributes role=\"banner\", role=\"navigation\", role=\"main\" and role=\"contentinfo\".JAWS, NVDA, and VoiceOver support the ability to navigate to sections of a web page using ARIA landmarks. Landmarks provide a more elegant solution to the problem of providing a way for users to skip to the main content of the web page. There is no visible alteration to the web design, making it unobtrusive and invisible. Of course, the fact that this technique is invisible is fine for blind screen reader users, but not so fine for sighted keyboard users or screen enlarger users with low vision. In this sense, HTML 5 regions and ARIA landmarks cannot yet replace the old-fashioned \"skip navigation\" links. Browsers still do not have a built-in way to notify users that HTML 5 regions or ARIA landmarks are present. Screen reader users are the only ones who can take advantage of them. There is a Firefox ARIA landmark extension opens in a new window available, which adds the ability to navigate by landmarks in Firefox, but this is not a native feature of the browser.",
    "ruleDescription": "Ensures the page has at most one contentinfo landmark.",
    "theAlgorithm": "This rule finds all contentinfo landmarks, filtering out those who do not map their role, and verifies that there is no more than one.",
    "disabilitiesAffected": "Sighted Keyboard Users,Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-required-attr": {
    "id": 82,
    "ruleId": "aria-required-attr",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Add the missing ARIA state or property to the given element.For more information about which ARIA role, state, and property attributes are allowed by role, see Accessible Rich Internet Applications (WAI-ARIA) 1.1 - Supported States and Properties.Whether widget roles are mapped to platform accessibility API states, for access by assistive technologies, or are meant to be accessed directly from the DOM, any property or state attributes they require must be specified so that assistive technologies can convey the purpose of the element to users.",
    "whyItMatters": "ARIA widget roles require additional attributes that describe the state of the widget. The state of the widget is not communicated to screen reader users if a required attribute is omitted.Certain roles act as composite user interface widgets. As such, they typically act as containers that manage other, contained widgets. When an object inherits from multiple ancestors and one ancestor indicates support for one property while another ancestor indicates that the same property is required, the property becomes required on the inheriting object. In some cases, default values are sufficient to meet ARIA attribute requirements.When required state and property attributes for specific roles (and subclass roles) are not present, screen readers may not be able to convey the definition of what the element's role is to the users.",
    "ruleDescription": "ARIA widget roles must have appropriate attributes describing the state or properties of the widget.",
    "theAlgorithm": "Checks all elements with the role attribute to ensure required attributes are defined.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "scope-attr-valid": {
    "id": 83,
    "ruleId": "scope-attr-valid",
    "userImpact": "Critical",
    "wcag": "Best Practice",
    "howToFixTheProblem": "If you are using HTML5, check that the scope attribute is only being used on th elements. If you are using HTML 4, check that the scope attribute is only being used on th and td.Finally, check that the value of the scope is either row or col, but nothing else. Add scope attribute values to all th elements that do not have one.The markup necessary to convey the relationship between header cells and data cells in data tables that are not complex can be accomplished using the scope attribute. The scope attribute tells the browser and screen reader that everything under the column is related to the header at the top, and everything to the right of the row header is related to that header.",
    "whyItMatters": "The scope attribute makes table navigation much easier for screen reader users, provided that it is used correctly. Incorrectly used, scope can make table navigation much harder and less efficient.A screen reader operates under the assumption that a table has a header and that this header specifies a scope. Because of the way screen readers function, having an accurate header makes viewing a table far more accessible and more efficient for people who use the device.",
    "ruleDescription": "The scope attribute must be used correctly on tables in accordance with either HTML4 or HTML5 specifications to enable efficient table navigation for screen reader users.",
    "theAlgorithm": "Ensures that the scope attribute is used correctly on tables.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "select-name": {
    "id": 84,
    "ruleId": "select-name",
    "userImpact": "Critical",
    "wcag": "4.1.2",
    "howToFixTheProblem": "Programmatically associate labels with select elements. The recommended method for most circumstances is to use the label element and an explicit association using the for and id attributes. The examples here are ordered from the most common acceptable solution to the least common acceptable solution.",
    "whyItMatters": "Effective form labels are required to make forms accessible. The purpose of form elements such as checkboxes, radio buttons, input fields, etcetera, is often apparent to sighted users, even if the form element is not programmatically labeled. Screen readers users require useful form labels to identify form fields. Adding a label to all form elements eliminates ambiguity and contributes to a more accessible product.When labels for form elements are absent, screen reader users do not know the input data expectations. Screen readers cannot programmatically determine information about input objects without an established label relationship (or redundant text serving as a label).",
    "ruleDescription": "Each select element must have a programmatically associated label element.",
    "theAlgorithm": "Ensures that every select element has a programmatically associated label.",
    "disabilitiesAffected": "Blind,Low Vision,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "1194.22 (n) Information required to complete electronic forms online"
  },
  "server-side-image-map": {
    "id": 85,
    "ruleId": "server-side-image-map",
    "userImpact": "Minor",
    "wcag": "2.1.1",
    "howToFixTheProblem": "Change all server-side image maps to client-side image maps.",
    "whyItMatters": "Server-side image maps are not keyboard accessible; mouse clicks are required to access the links contained in the image, making the image inaccessible to people who only use keyboards for their navigation.Server side image maps pass the coordinates of the mouse click to the server-side script used to process the image map. Because they rely on mouse clicks, they are not keyboard accessible, whereas client-side image maps are keyboard accessible. Further, it is not possible to provide text alternatives to the actionable areas of a server-side image map like you can with the areas of a client-side image map.",
    "ruleDescription": "The document contains an image map that is server-side instead of client-side.",
    "theAlgorithm": "Ensures that server-side image maps are never used.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Section 508: MUST",
    "wcagSuccessCriteria": "2.1.1 Keyboard",
    "section508Guidelines": "1194.22 (f) Client-side image maps instead of server-side"
  },
  "svg-img-alt": {
    "id": 86,
    "ruleId": "svg-img-alt",
    "userImpact": "Serious",
    "wcag": "1.1.1",
    "howToFixTheProblem": "Ensure that all SVG elements that are added as markup into the HTML",
    "whyItMatters": "The intent of Success Criterion 1.1.1 is to make information conveyed by non-text content (including SVG images) accessible through the use of a text alternative. Text alternatives are a primary way for making information accessible because they can be rendered through any sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows the information to be rendered in a variety of ways by a variety of user agents. For example, a person who cannot see a picture can have the text alternative read aloud using synthesized speech. A person who cannot hear an audio file can have the text alternative displayed so that he or she can read it. In the future, text alternatives will also allow information to be more easily translated into sign language or into a simpler form of the same language.",
    "ruleDescription": "Ensures SVG elements with an <img>, graphics-document or graphics-symbol role have an accessible text alternative.",
    "theAlgorithm": "The algorithm for this rule returns:",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Not specified, or not applicable",
    "wcagSuccessCriteria": "1.1.1 Non-text Content",
    "section508Guidelines": "1194.22 (a) Text equivalent for non-text elements"
  },
  "empty-table-header": {
    "id": 87,
    "ruleId": "empty-table-header",
    "userImpact": "Minor",
    "wcag": "1.3.1",
    "howToFixTheProblem": "Table header elements (those marked with <th> or role=\"rowheader\" or role=\"columnheader\") should have visible text that describes its purpose.",
    "whyItMatters": "Table header elements should have visible text that describes the purpose of the row or column to both sighted users and screen reader users.",
    "ruleDescription": "Table header elements should have visible text. Ensure that the table header can be used by screen reader users. If the element is not a header, marking it up with a `td` is more appropriate.",
    "theAlgorithm": "Checks all table header elements to ensure that they have a visible text.",
    "disabilitiesAffected": "Blind,Low Vision",
    "requirements": "WCAG 2.0 (A): SHOULD",
    "wcagSuccessCriteria": "1.3.1 Info and Relationships",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "color-contrast": {
    "id": 88,
    "ruleId": "color-contrast",
    "userImpact": "Serious",
    "wcag": "1.4.3",
    "howToFixTheProblem": "Ensure all text elements have sufficient color contrast between the text in the foreground and background color behind it.Success Criterion: Ensure color contrast of at least 4.5:1 for small text or 3:1 for large text, even if text is part of an image. Large text has been defined in the requirements as 18pt (24 CSS pixels) or 14pt bold (19 CSS pixels). Note: Elements found to have a 1:1 ratio are considered \"incomplete\" and require a manual review.",
    "whyItMatters": "Some people with low vision experience low contrast, meaning that there aren't very many bright or dark areas. Everything tends to appear about the same brightness, which makes it hard to distinguish outlines, borders, edges, and details. Text that is too close in luminance (brightness) to the background can be hard to read.There are nearly three times more individuals with low vision than those with total blindness. One in twelve people cannot see the average full spectrum of colors - about 8% of men and 0.4% of women in the US. A person with low vision or color blindness is unable to distinguish text against a background without sufficient contrast.Color transparency and opacity is taken into account in the background. Color transparency and opacity in the foreground is more difficult to detect and account for due to:1:1 colors in foreground and background. CSS background gradients. Background colors in CSS pseudo-elements. Background colors created with CSS borders. Overlap by another element in the foreground - this sometimes comes up with tricky positioning. Elements moved outside the viewport via CSS.",
    "ruleDescription": "All text elements must have sufficient contrast between text in the foreground and background colors behind it in accordance with WCAG 2 AA contrast ratio thresholds.",
    "theAlgorithm": "Checks all text elements to ensure that the contrast between the foreground text and the background colors meet the WCAG 2 AA contrast ratio thresholds.",
    "disabilitiesAffected": "Low Vision,Colorblindness",
    "requirements": "WCAG 2.0 (AA): MUST",
    "wcagSuccessCriteria": "1.4.3 Contrast (Minimum)",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "image-redundant-alt": {
    "id": 89,
    "ruleId": "image-redundant-alt",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Don't put the same text in the alt attribute value for a button or link in the text adjacent to the corresponding image or link.",
    "whyItMatters": "It is unnecessary and potentially confusing to have alternative text for a link or image to be repeated in text adjacent to the link or image since it would be read twice by a screen reader.Since image buttons use alt attributes for labels, the labels must not duplicate the text next to the button. Duplicated alternative text for an image or link in the text adjacent to that image or link results in screen readers announcing the text to the user twice.",
    "ruleDescription": "When button and link text repeats in a alt attribute value, screen reader users hear the same information twice, which renders the alt text meaningless and confusing.",
    "theAlgorithm": "Ensure button and link text is not repeated as image alternative.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "table-duplicate-name": {
    "id": 90,
    "ruleId": "table-duplicate-name",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "This Rule checks for tables that have identical summary and caption text. To fix the problem, ensure that the content of the summary attribute and the <caption> elements are not identical.To ensure screen reader users can make sense of tabular data:Use the <caption> element for onscreen title. Use the summary attribute—only read by screen readers—to describe the table structure.",
    "whyItMatters": "Screen readers have a specific way of announcing tables. When tables are not properly marked up, this creates the opportunity for confusing or inaccurate screen reader output.When tables have summary and caption text that is identical, screen reader users can be confused and find it difficult to know the name and purpose of the table.",
    "ruleDescription": "Data table markup can be tedious and confusing. Make sure the caption and summary table attributes are not identical. Screen readers have some features to manage table navigation, but tables must be marked up accurately for these features to work correctly.",
    "theAlgorithm": "Checks that data tables that have both a summary and caption have the same text for each.",
    "disabilitiesAffected": "Blind,Deafblind",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "skip-link": {
    "id": 91,
    "ruleId": "skip-link",
    "userImpact": "Moderate",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Ensure that all skip links in the webpage have a focusable target that allows users to skip the navigation.Place the skip navigation link at the top of the page right after the opening body tag.",
    "whyItMatters": "Screen readers announce content sequentially as it appears in the HTML file. What this means for users of assistive technology is that the content at the top of the page, typically including the entire navigation, is read out to the user before reaching any of the main content. Since content at the top of the page can often be very lengthy, it can be time-consuming to listen to or tab through all of it when the user is only interested in the main content. Including a skip link in an HTML page is beneficial to blind users, users with low vision, and mouse-only users.",
    "ruleDescription": "The page must have a link at the top before the navigation that allows users to skip lengthy navigation and proceed to a page's main content to save time.",
    "theAlgorithm": "Ensures that developers follow the best practice of having a skip link as the very first link in a page",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "meta-refresh": {
    "id": 92,
    "ruleId": "meta-refresh",
    "userImpact": "Critical",
    "wcag": "2.2.1, 2.2.4, 3.2.5",
    "howToFixTheProblem": "Remove the http-equiv=\"refresh\" attribute from each meta element in which it is present.",
    "whyItMatters": "Since users do not expect a page to refresh automatically, such refreshing can be disorienting. Refreshing also moves the programmatic focus back to the top of the page, away from where the user had it. Such resetting is frustrating for users.Redirection and page refresh through the use of the <meta> element is problematic for users with disabilities in many ways. The primary reason why redirects and refreshes are problematic is that the user has no control over when the redirect or refresh occurs. If the purpose of the <meta> element is to redirect the user to a new location, server-side means should be employed instead of client-side. Content that moves or auto-updates can be a barrier to anyone who has trouble reading the stationary text as quickly as well as to anyone who has trouble tracking moving objects. It can also cause problems for screen readers.",
    "ruleDescription": "The document must not use <meta http-equiv=\"refresh\"> because it can prevent control over when the refresh occurs for users with disabilities",
    "theAlgorithm": "Checks for the presence of the http-equiv=\"refresh\" attribute on the meta elements.Resources",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (AA): MUST",
    "wcagSuccessCriteria": "2.2.1 Timing Adjustable 2.2.4 Interruptions 3.2.5 Change on Request",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "aria-roledescription": {
    "id": 93,
    "ruleId": "aria-roledescription",
    "userImpact": "Serious",
    "wcag": "4.1.2",
    "howToFixTheProblem": "ARIA explicitly defines which attributes are allowed for any given role and for every attribute, where that attribute may be used. The detailed information on each attribute can be found by looking at the documentation for each role and/or each attribute.",
    "whyItMatters": "Inappropriate aria-roledescription attribute values that conflict with an element's implied or explicit role value can interfere with the accessibility of the web page. A conflicting aria-roledescription attribute value may result in no effect on the accessibility of the application and may trigger behavior that disables accessibility for entire portions of an application.When aria-roledescription> attributes are applied to HTML elements not in accordance with WAI-ARIA 1.1, semantics conflict between the aria-roledescription value and the implicit or explicit element role value which may result in assistive technology products reporting nonsensical user interface (UI) information that does not correctly represent the intended UI experience.",
    "ruleDescription": "Ensures that the aria-roledescription attribute is only used on elements with an implicit or explicit role values.",
    "theAlgorithm": "Use aria-roledescription values to appropriately describe implied or explicit element role values.",
    "disabilitiesAffected": "Blind,Deafblind,Mobility",
    "requirements": "WCAG 2.0 (A): MUST",
    "wcagSuccessCriteria": "4.1.2 Name, Role, Value",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "meta-viewport-large": {
    "id": 94,
    "ruleId": "meta-viewport-large",
    "userImpact": "Minor",
    "wcag": "Best Practice",
    "howToFixTheProblem": "Remove the user-scalable=\"no\" parameter from the content attribute of the <meta name=\"viewport\"> element in order to allow zooming and ensure the maximum-scale parameter is not less than 5.A meta viewport element tells the browser how to control the page's dimensions and to scale, but the ability to zoom can be disabled as a result of its use.",
    "whyItMatters": "The user-scalable=\"no\" parameter inside the content attribute of <meta name=\"viewport\"> element disables zooming on a page. The maximum-scale parameter limits the amount the user can zoom. This is problematic for people with low vision who rely on screen magnifiers to properly see the contents of a web page.Users with partial vision and low vision often choose to enlarge the fonts on their browser to make text on the web easier to read. The browser's viewport focus is everything visible in the browser window at a given moment. If the user maximizes the browser to full size on a high-resolution monitor, the viewport focus area is large and may include the entire web page. If the browser window is small, the viewport focus area includes only a small part of the web page. The browser's viewport focus does not affect the programmatic focus. Users can scroll up and down the web page, but the programmatic focus does not follow the viewport. The Web Content Accessibility Guidelines calls for developers to design pages so that they support resize up to 200%; however, it is a best practice to require 5x zoom.",
    "ruleDescription": "The document must not use the user-scalable=\"no\" parameter in the <meta name=\"viewport\"> element because it disables text scaling and zooming which is essential to users with low vision.",
    "theAlgorithm": "Ensures that the user-scalable=\"no\" parameter is not present in the <meta name=\"viewport\"> element and the maximum-scale parameter is not less than 500%.",
    "disabilitiesAffected": "Low Vision",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "Not specified, or not applicable",
    "section508Guidelines": "Not specified, or not applicable"
  },
  "meta-viewport": {
    "id": 95,
    "ruleId": "meta-viewport",
    "userImpact": "Critical",
    "wcag": "1.4.4",
    "howToFixTheProblem": "Remove the user-scalable=\"no\" parameter from the content attribute of the <meta name=\"viewport\"> element in order to allow zooming and ensure the maximum-scale parameter is not less than 2.A meta viewport element tells the browser how to control the page's dimensions and to scale, but the ability to zoom can be disabled as a result of its use.",
    "whyItMatters": "The user-scalable=\"no\" parameter inside the content attribute of <meta name=\"viewport\"> element disables zooming on a page. The maximum-scale parameter limits the amount the user can zoom. This is problematic for people with low vision who rely on screen magnifiers to properly see the contents of a web page.Users with partial vision and low vision often choose to enlarge the fonts on their browser to make text on the web easier to read. The browser's viewport focus is everything visible in the browser window at a given moment. Maximizing the browser to full size on a high-resolution monitor creates a large the viewport focus area and may include the entire web page. If the browser window is small, the viewport focus area only includes a small part of the web page. The browser's viewport focus does not affect the programmatic focus. Users can scroll up and down the web page, but the programmatic focus does not follow the viewport. The Web Content Accessibility Guidelines calls for developers to design pages so that they support resize up to 200%. Ensures that the user-scalable=\"no\" parameter is not present in the <meta name=\"viewport\"> element and the maximum-scale parameter is not less than 2.",
    "ruleDescription": "The document must not use the user-scalable=\"no\" parameter in the <meta name=\"viewport\"> element because it disables text scaling and zooming which is essential to users with low vision.",
    "theAlgorithm": "Ensures that the user-scalable=\"no\" parameter is not present in the <meta name=\"viewport\"> element and the maximum-scale parameter is not less than 2.",
    "disabilitiesAffected": "Low Vision",
    "requirements": "Best Practice",
    "wcagSuccessCriteria": "1.4.4 Resize text",
    "section508Guidelines": "Not specified, or not applicable"
  }
}
